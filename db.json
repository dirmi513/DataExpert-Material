[
{
  "model": "courses.courselessonslidemaster",
  "pk": 111,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 1,
    "slideNumber": 1,
    "lesson": "Introductory Python",
    "slide": "Course Overview",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\">Course Overview</h2><p>Welcome to DataExpert, and congratulations on the start of your journey to becoming a data expert! This introductory course will cover the basics of the Python programming language. No prior programming experience is required, as we will teach you all that you need to know to become a competent Python programmer, with a specific focus on data science use cases. Not only is Python one of the most popular programming language amongst data experts (Data Analysts, Data Scientists, Data Engineers), it is one of the most popular programming languages out there! In fact, according to GitHub's 2019 annual developer survey, known as Octoverse, \"Python outranked Java as the second most popular language on GitHub by repository contributors.\"<br><br>If this is your first foray into the world of computer programming, learning Python is an excellent programming language to begin with because it is a <a href=\"https://en.wikipedia.org/wiki/General-purpose_programming_language\" target=\"_blank\">general-purpose</a>, <a href=\"https://en.wikipedia.org/wiki/High-level_programming_language\" target=\"_blank\">high-level</a> programming language. In short, Python can be used to accomplish a wide array of distinct tasks (general-purpose), and it is fairly straightforward to understand and write Python code, as the language implementation <a href=\"https://computersciencewiki.org/index.php/Abstraction\" target=\"_blank\">abstracts</a> a lot of the complexities associated with how the code is actually executed (high-level). This allows you to easily write code that will do what you want in a simple and understandable manner.<br><br> Each one of our lessons is structured in a way that will allow you to:<ul><li>learn new concepts</li><li>build upon previous concepts</li><li>apply your newfound knowledge via interactive coding challenges and guided projects</li></ul>A single lesson within a course is composed of multiple slides. The majority of slides will contain a text editor for you to write your code, buttons for you to be able to execute your code and check whether or not you completed the coding challenge correctly, and an output area that will display the results of your code being executed. This way you will stay engaged, interested, and be able to retain as much information as possible. The course material is dense, yet succinct, and we try to break down complex topics into simple and understandable chunks. The difficulty of the material will increase steadily, giving you the opportunity to slowly accumulate the skill-set and knowledge necessary to complete our guided projects and eventually get a job!<br><br>Throughout our lessons you will see that certain words and phrases link to an article or documentation online, which will provide a more in depth explanation of that topic. We highly suggest that you dedicate some time to do this extra reading, as it will help you gain a better understanding of the whys and hows. If we come across an article that does a great job of explaining an important topic and/or goes into greater depth on it than we do, we will link you to it. In addition, everything Python related is documented online, and being able to understand this documentation is an indispensable skill that will go a long way. If the documentation seems intimidating and overwhelming at first, do not feel discouraged. As you gain more knowledge and experience while going through our lessons, you will slowly gain the ability to decipher more complex technical information, such as programming documentation. Remember, Rome was not built in a day, and you will not become a data expert in a day. With hard work, dedication, and persistence, everything will come together and you will prevail. Please be patient, stay excited, and get ready to become a true DataExpert! Now, let's get started.</p>",
    "codedSlide": "F",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 112,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 1,
    "slideNumber": 2,
    "lesson": "Introductory Python",
    "slide": "Arithmetic Operations",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\">Arithmetic Operations</h2>\r\n\r\n<p>\r\n    We write code in a programming language to instruct the computer to perform a single, or series, of tasks for us.\r\n    The most basic of these tasks are arithmetic operations - addition, subtraction, multiplication, division, and exponentiation.\r\n    To perform these calculations, we have to let the computer know (by giving it commands):\r\n</p>\r\n\r\n<ul>\r\n    <li>which numbers to perform the calculation(s) on</li>\r\n    <li>which calculation(s) to perform</li>\r\n</ul>\r\n\r\n<p>\r\n    For the second bullet point above, we make use of Python\u2019s <b>arithmetic operators</b>, which perform calculations\r\n    on two or more numbers, known as <b>operands</b>.\r\n    Before we continue, we want to point out that any text within a slide with a light gray background, such as\r\n    <code>print('hello world')</code>, is Python code. Now back to arithmetic operators:\r\n</p>\r\n\r\n<ul>\r\n    <li> Addition Operator: <code> + </code>\r\n        <ul class=\"code-list\">\r\n            <li> <code>6 + 2</code> </li>\r\n        </ul>\r\n    </li>\r\n\r\n    <li> Subtraction Operator: <code> - </code>\r\n        <ul class=\"code-list\">\r\n            <li> <code>6 - 2</code> </li>\r\n        </ul>\r\n    </li>\r\n\r\n    <li> Multiplication Operator: <code> * </code>\r\n        <ul class=\"code-list\">\r\n            <li> <code>6 * 2</code> </li>\r\n        </ul>\r\n    </li>\r\n\r\n    <li> Division Operator: <code> / </code>\r\n        <ul class=\"code-list\">\r\n            <li> <code>6 / 2</code> </li>\r\n        </ul>\r\n    </li>\r\n\r\n    <li> Exponentiation Operator: <code> ** </code>\r\n        <ul class=\"code-list\">\r\n            <li> <code>6 ** 2</code> , which is 6 to the power of 2, or 36.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p> For arithmetic operations, the operands can be: </p>\r\n\r\n<ul>\r\n    <li> Integers - whole numbers without a decimal point\r\n        <ul>\r\n            <li>50, 2, -100, 5, 234 </li>\r\n        </ul>\r\n    </li>\r\n\r\n    <li> Floating Point Numbers (aka Floats) - numbers with a decimal point\r\n        <ul>\r\n            <li>1.452, 3.14, 0.75653, 123.7\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p>\r\n    We can make use of multiple arithmetic operators on a combination of integers and floats, and in a single command:\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n    <li>\r\n        <code>5.7 * 10 - 2.5 + 3</code>\r\n    </li>\r\n    <li>\r\n        <code>5 ** 2 / 5 + 40.8</code>\r\n    </li>\r\n</ul>\r\n\r\n<hr class=\"hr-challenge\" >\r\n\r\n<h3 class=\"coding-challenge-heading\"> Coding Challenge </h3>\r\n\r\n<p>\r\n    When writing out a single, or sequence, of Python commands (also known as\r\n    <a href=\"https://techterms.com/definition/sourcecode\" target=\"_blank\">source code</a>) to be executed, we usually\r\n    do so in a <a href=\"https://en.wikipedia.org/wiki/Source-code_editor\" target=\"_blank\">source code editor</a>.\r\n    As you have probably already noticed, there is a source code editor on the top right hand side of the screen. This\r\n    is where you will write all of your code while going through the lessons. </p>\r\n\r\n<p>\r\n    Right below the source code editor, there is a row of buttons that you will be using quite frequently:\r\n</p>\r\n\r\n<ul>\r\n    <li>\r\n        <b>Execute Code</b> - this button will execute all of the code that you have written in the source code editor,\r\n        and then display the results on the bottom right hand portion of your screen.\r\n    </li>\r\n    <li>\r\n        <b>Submit Answer</b> - this button will do the same as the Execute Code button, but will also check to see if you\r\n        answered the coding challenge question(s) correctly.\r\n    </li>\r\n    <li>\r\n        <b>Restore Code</b> - this is the circular, light green button to the right of the Submit Answer button. If you\r\n        click it and then click Restore Code in the pop-up box that will appear, any code that you wrote and is currently\r\n        in the source code editor for the slide that you are on will be replaced with the default code for that slide. The\r\n        default code for a slide is either no code at all, or preset code that we create, which you will see on the screen\r\n        the first time you come to a slide.\r\n    </li>\r\n</ul>\r\n\r\n<p>\r\n    For this coding challenge, please enter the following command in the source code editor, and then press the Submit\r\n    Answer button:\r\n</p>\r\n\r\n<ul>\r\n    <li> <code> print(20 * 3 + 150) </code>\r\n    </li>\r\n</ul>\r\n\r\n<p>Congratulations on writing your first line of code! </p>",
    "codedSlide": "T",
    "correctAnswer": "print(20 * 3 + 150)",
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 113,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 1,
    "slideNumber": 3,
    "lesson": "Introductory Python",
    "slide": "Print Expression",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\">Print Function</h2>\r\n\r\n<p>\r\n    For the previous slide's coding challenge, the command that you had to execute was <code>print(20 * 3 + 150)</code>. \r\n    This command utilized Python\u2019s built-in <code>print()</code> function (we will explore functions in great depth later on). \r\n    What happened behind the scenes when you executed <code>print(20 * 3 + 150)</code>? \r\n\r\n<ol>\r\n    <li> \r\n        Python first performed the calculations within the parenthesis, <code>20 * 3 + 150</code>. \r\n        The order of operations in Python is determined by \r\n        <a href= \"https://www.mathsisfun.com/operation-order-pemdas.html \" target= \"_blank \">PEMDAS</a>: \r\n        <ul> \r\n            <li> First, 20 was multiplied by 3 to get 60. </li> \r\n            \r\n            <li> Then, 150 was added that product of 60 to get the final value of 210. </li> \r\n        </ul> \r\n    </li> \r\n    \r\n    <li> \r\n        <code>print(210)</code> was executed, which instructs Python to display the value that is within the parenthesis \r\n        of <code>print(210)</code> on your screen. \r\n    </li> \r\n</ol> \r\n\r\n<p> \r\n    If you had just entered <code>20 * 3 + 150</code> into the text editor without using the <code>print()</code> function, \r\n    Python would still perform the calculations behind the scenes, but result would <b>not</b> be displayed on the screen. \r\n    That is why we use the <code>print()</code> function. \r\n    \r\n    <br><br> \r\n    \r\n    Every distinct command in your source code <strong>must</strong> be separated by a new line. For example, if you want \r\n    to use the print function more than once: \r\n</p> \r\n\r\n<div align=\"center \"> \r\n    <img src= \"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/3+-+Print+Expression/print_1.png \" style= \"width:201px; height:181px; \"> \r\n</div> \r\n\r\n<br> \r\n\r\n<p> As you can see above: </p> \r\n\r\n<ul> \r\n    <li> \r\n        There are multiple, distinct arithmetic expressions, and each one is contained in a separate <code>print()</code> function. \r\n    </li> \r\n    \r\n    <li> \r\n        Each time the <code>print()</code> function is used, it is on a new line in the source code editor. Please note \r\n        that it does not matter if the next <code>print()</code> function is on the line directly below the current one, \r\n        or five lines down, as long as it is on a new line. \r\n    </li> \r\n    \r\n    <li> \r\n        The output of executing the source code displays the resulting value of each expression in the same order as the \r\n        commands are written in the source code. Python executes your source code from top to bottom.\r\n    </li> \r\n</ul> \r\n\r\n<p> \r\n    If there are multiple <code>print()</code> functions on the same line in the source code, Python will display the \r\n    following error message when we try to execute the code: \r\n</p> \r\n\r\n<div align= \"center\"> \r\n    <img src= \"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/3+-+Print+Expression/print_2.png \" style= \"width:420px; height:142px; \"> \r\n</div> \r\n\r\n<br> \r\n\r\n<p> \r\n    The great thing about Python is that it always tries to give us enough information to be able to dissect the issue(s) \r\n    in our code. Here it is telling us: \r\n</p> \r\n\r\n<ul> \r\n    <li> Which line in the source code is causing the error - <code>line 1</code> </li> \r\n    \r\n    <li> The type of error - <code>SyntaxError</code> </li> \r\n    \r\n    <li> A brief description of the error - <code>invalid syntax</code> </li> \r\n</ul> \r\n\r\n<p> Syntax is the next topic that we will explore. </p> \r\n\r\n<hr class=\"hr-challenge\">\r\n\r\n<h3 class=\"coding-challenge-heading\"> Coding Challenge </h3> \r\n\r\n<p> \r\n    For this challenge, your task is to create source code that will evaluate and display the results of the following \r\n    <b>distinct</b> arithmetic expressions on the screen: \r\n</p> \r\n\r\n<ul> \r\n    <li> <code>(5 * 4.5) + 15</code> </li> \r\n    <li> <code>10 / 3</code> </li> \r\n    <li> <code>3 - 274.7 + 54</code> </li> \r\n</ul>",
    "codedSlide": "T",
    "correctAnswer": "print((5 * 4.5) + 15)\nprint(10 / 3)\nprint(3 - 274.7 + 54)",
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 114,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 1,
    "slideNumber": 4,
    "lesson": "Introductory Python",
    "slide": "Python Syntax",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\">Python Syntax</h2> \r\n\r\n<p> \r\n    Any natural language, such as English, has certain \r\n    <a href=\"https://www.englishclub.com/grammar/\" target=\"_blank\"> grammar rules</a> \r\n    that you must follow in order to construct valid sentences. This is also the case for all programming languages. \r\n    Each unique programming language is analogous to a human language, and requires adherence to specific grammar, \r\n    also known as syntax, rules. These syntax rules define whether or not your code is properly written, and if it is not, \r\n    you will most definitely get a <code>SyntaxError</code> when trying to execute the code. Some of Python's syntax rules \r\n    that you have already come across (explicitly and implicitly) are that: \r\n</p> \r\n\r\n<ul>\r\n    <li>\r\n        Every distinct command must be separated by a new line in your source code.\r\n        <ul>\r\n            <li>\r\n                In the previous slide, we showed you the output (<code>SyntaxError</code>) of trying to execute code that \r\n                had two consecutive <code>print()</code> functions separated by a space instead of a new line. \r\n            </li> \r\n        </ul> \r\n    </li> \r\n    \r\n    <li> \r\n        To properly utilize a function within your source code, it must be written in the following format: \r\n        <code>name_of_function(function arguments)</code>.\r\n        <ul> \r\n            <li> \r\n                Lets use <code>print(5 + 5)</code> as an example. The function's name is <code>print</code>, followed by \r\n                an open parenthesis <code>(</code>, the arguments passed to the function (which we will cover in a later lesson) \r\n                <code>5 + 5</code>, and finally a close parenthesis <code>)</code>. What would happen if we used a close square \r\n                bracket instead of parenthesis? \r\n            </li> \r\n        </ul> \r\n    </li> \r\n</ul> \r\n\r\n<div align=\"center\"> \r\n    <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/4+-+Syntax/syntax_1.png\" style=\"width:421px; height:148px;\"> \r\n</div> \r\n\r\n<br> \r\n\r\n<p> \r\n    As you can see, Python throws a <code>SyntaxError</code>. Now, what if we accidentally used a symbol that is not a valid \r\n    arithmetic operator? \r\n</p> \r\n\r\n<div align=\"center\"> \r\n    <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/4+-+Syntax/syntax_2.png\" style=\"width:421px; height:139px;\"> \r\n</div> \r\n\r\n<br> \r\n\r\n<p> \r\n    Another <code>SyntaxError</code>, as you might have expected. In both of the examples above, Python tried pointing us \r\n    to the exact location of the syntax error in our source code. \r\n    \r\n    <br><br> \r\n    \r\n    To avoid syntax errors, you must be diligent when writing code. We have just covered a few of Python's various syntax rules, \r\n    but will continue to highlight proper Python syntax as new concepts are introduced. Similar to speaking and writing in a natural \r\n    language, as you become a more experienced coder, writing syntactically accurate code gets easier. And for the times when there \r\n    are syntax errors in your source code, Python will throw a <code>SyntaxError</code>, and try to point you to where the error occurred. \r\n</p>",
    "codedSlide": "F",
    "correctAnswer": "test",
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 115,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 1,
    "slideNumber": 5,
    "lesson": "Introductory Python",
    "slide": "Comments",
    "defaultCode": "",
    "htmlBody": "        <p>\n        As you gain more experience writing code, the length and/or complexity of your code will increase.  In addition, code you write will potentially be looked at, used, or edited by either you or someone else.  This is where comments come in handy, as they allow you to explain what a certain portion of code is doing.\n        <br><br>\n        We make use of comments in Python with the hashtag symbol <code>#</code>.  As you already know, the interpreter executes your code line by line.  During execution, it ignores any text that comes after a hashtag, which tells it \"I am a comment, ignore me!\" \n        <br><br>\n        Comments can be placed:\n        <ul>\n            <li> on their own line within the text editor </li>\n            <li> after a legit command </li> \n        </ul>\n        <div align=\"center\">\n            <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/5+-+Comments/comment_1.png\" style=\"width:311px; height:133px;\">\n        </div>\n        <br>\n        <p>\n            Some things to note about using comments in your code:\n        </p>\n        <ul>\n            <li>\n                If you start a new line with a comment and then on that same line continue writing legitimate Python code, the interpreter will not execute the code.  It will consider it as being part of that comment.  For example, the interpreter will interpret the following line as a comment:\n                <ul>\n                    <li>\n                        <code># this is a comment print(5 / 5)</code>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                When placing a comment after a command on the same line, it's best practice to add a space or two in between the end of the command and the start of the comment:  \n                <ul>\n                    <li>\n                        <code>print(5 / 5)  # this is a comment</code>\n                    </li>\n                </ul> \n            </li>\n        </ul>\n        <p>  \n            How often should you include comments in your code?  There is no set amount, but our suggestion would be to include them only when you deem necessary.  Although, there is such a thing as too many comments.  You don't want to include them for code that can be easily understood by a competent programmer. \n        <br><br>    \n            We'll occasionally make use of comments in the default code for certain slides, and our guided projects solution code.  If you'd like, you can use these as a guide for including comments in your own code.  \n        <br><br>\n            Feel free to experiment with the <code>print()</code> function and Python comments in the text editor.  There is no coding challenge for this slide. \n        </p> ",
    "codedSlide": "T",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 116,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 1,
    "slideNumber": 6,
    "lesson": "Introductory Python",
    "slide": "Summary",
    "defaultCode": "",
    "htmlBody": "<p>\n            Congratulations on completing your first DataExpert lesson!  \n        <br><br> \n            Every lesson concludes with a summary slide that:\n            <ul>\n                <li>\n                    Highlights and briefly summarizes key concepts from the lesson.\n                </li>\n                <li>\n                    Has links to articles and/or documentation for new terms introduced throughout the lesson that we believe would be worthwhile for you to look into. \n                </li> \n            </ul>\n        </p>\n        <h3> Key Concepts </h3> \n        <ul>\n            <li>\n                Python is one of the most, if not the most, widely used programming languages in the data science world.  This is due to its versatility, ease of use, and continued support for data science use cases (we will go into more detail on the last reason later on).    \n            </li>\n            <li>\n                Humans utilize programming languages to instruct the computer to perform specific commands, the most basic being arithmetic calculations.\n                <ul>\n                    <li>\n                        To perform arithmetic calculations in Python, you need to use its arithmetic operators: <code>+ - * / **</code>.\n                    </li>\n                </ul> \n            </li> \n            <li>\n                The <code>print()</code> function can be used to display numbers (integers, floats), or the result of arithmetic computations on your screen.  It can also be utilized do display other Python data types. \n            </li> \n            <li>\n                Just like natural, human languages have grammar rules that define the structure of the language, programming languages have syntax rules.  If you have incorrect syntax in your Python source code, the interpreter will halt execution at the source of the error and raise a <code>SyntaxError</code>.\n            </li>\n            <li>\n                We can make use of comments in our code to document the purpose of certain portions of the code. \n            </li>\n        </ul>",
    "codedSlide": "F",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 121,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 2,
    "slideNumber": 1,
    "lesson": "Primitive Data Types",
    "slide": "Introduction to Strings",
    "defaultCode": "",
    "htmlBody": "<p>      \n                We previously learned how to use Python as a calculator to perform operations on the integer and float numeric <i>data types</i>.  One data type differs from another in its features and/or the operations that can be performed on data of that data type.  For example, integers are whole numbers that you can perform arithmetical computations on.  You can also perform arithmetical computations on floats, but they are numbers that contain a decimal point.  \n            <br><br>\n                <i>Strings</i> are another one of Python's basic data types. A string is comprised of zero or more characters enclosed (delimited) in single <code>''</code> or double <code>\"\"</code> quotation marks.  There is no restriction on which characters, or the combination of characters that can be used to form a string. \n            <br><br> \n                Some examples of strings are:\n            </p>\n            <ul> \n                <li>\n                    <code>\"A\"</code> \n                </li>\n                <li>\n                    <code>'Hello world'</code> \n                </li>\n                <li>\n                    <code>\"12345\"</code> \n                </li>\n                <li>\n                    <code>'The company's profits increased by $45,000.'</code> \n                </li>\n                <li>\n                    <code>\"!@#$%^&*()%\"</code> \n                </li>\n                <li>\n                    <code>''</code> \n                </li> \n            </ul>\n            <p>\n                Sometimes you'll want to include single and/or double quotes within a string.  Remember that the Python interpreter determines if data is a string by looking for enclosing single or double quotes.  Therefore, including single (double) quote(s) in a string that is delimited by single (double) quotes will result in a <code>SyntaxError</code>:\n            </p> \n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_1.png\" style=\"width:489px; height:132px;\">\n            </div>\n            <br> \n            <p>\n                This is because the interpreter considers anything in between two quotation marks as a string, so it throws an error when you try including single quotes within a string that is delimited by single quotes.  In the image above, you can see that <code>'This is a string containing '</code> is a light green color, indicating that it is a string.  The interpreter mistakenly interpreted this smaller portion of the whole string we intended to create as the full string.  The same thing would happen if we tried including double quotes within a string delimited by double quotes.  So how can we get around this?  There are a few options.\n            </p> \n            <ul>\n                <li>\n                    For a string that will only contain single or double quotes, just enclose the string in the other type of quotation marks.  For example, \n                    <ul>\n                        <li>\n                            If you want a string to only include single quotes, enclose the string in double quotes:\n                            <ul>\n                                <li>\n                                    <code>\n                                        \"This is a string that contains 'single quotes' and is enclosed in double quotes.\"\n                                    </code>\n                                </li>\n                            </ul> \n                        </li>\n                        <li>\n                            If you want a string to only include double quotes, enclose the string in single quotes: \n                            <ul>\n                                <li>\n                                    <code>\n                                        'This is a string that contains \"double quotes\" and is enclosed in single quotes.'\n                                    </code>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    You can <i>escape</i> quotes within a string by using the backslash <code>\\</code> character.  The backslash character can be used with certain characters to inform the interpreter to ignore, or escape, the usual interpretation of that character.    \n                    <ul>\n                        <li>\n                            If you want to include single (double) quotes in a string delimited by single (double) quotes, insert a backslash character right before the single (double) quote(s) that are within that string:\n                        </li>\n                    </ul>\n                </li> \n            </ul>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_2.png\" style=\"width:377px; height:114px;\">\n            </div>\n            <br>\n            <p>\n                In addition, the backslash can be used on its own, or with other characters within a string for various purposes:\n            </p>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_3.png\" style=\"width:451px; height:388px;\">\n            </div>\n            <br>\n            <p>\n            Finally, if you want to create a multiline string without having to use the <code>\n</code> escape sequence, you can enclose a string in triple single or double quotes.  The benefit of using triple quotes is that you can include both single and double quotes within the string without having to escape them.\n            </p>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_4.png\" style=\"width:325px; height:186px;\">\n            </div>\n\n            <hr id=\"hrChallenge\">  \n            <h3 class=\"codingChallenge\"> Coding Challenge </h2>\n            <p>\n                In a previous lesson, we utilized Python's built-in <code>print()</code> function to display the output of various math computations.\n                <br><br>\n                We can also use this function to print strings - just put the string (with quotes) within the parentheses of the <code>print()</code> function.\n                <br><br>\n                For this challenge, print the following strings on the screen, in the order presented below:\n            </p> \n            <ul>\n                <li>Hello and welcome to data expert!</li>\n                <li>The correct \"term\" is data expert</li>\n                <li>If you're going to give it a try, give it your all</li>\n            </ul>",
    "codedSlide": "T",
    "correctAnswer": "print('Hello and welcome to data expert!')\nprint('The correct \"term\" is data expert')\nprint('If you\\'re going to give it a try, give it your all')",
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 122,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 2,
    "slideNumber": 2,
    "lesson": "Primitive Data Types",
    "slide": "String Indexing",
    "defaultCode": "",
    "htmlBody": "",
    "codedSlide": "T",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 123,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 2,
    "slideNumber": 3,
    "lesson": "Primitive Data Types",
    "slide": "String Slicing",
    "defaultCode": "",
    "htmlBody": "",
    "codedSlide": "T",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 124,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 2,
    "slideNumber": 4,
    "lesson": "Primitive Data Types",
    "slide": "Variables",
    "defaultCode": "",
    "htmlBody": "",
    "codedSlide": "T",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 125,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 2,
    "slideNumber": 5,
    "lesson": "Primitive Data Types",
    "slide": "Boolean",
    "defaultCode": "x = 30\ny = 20\nnyc = 'New York City is known as the \"Big Apple\"'\nfl = 'Florida is known as the \"Sunshine State\"'",
    "htmlBody": "                <p>Data science is the most interesting and intellectually stimulating profession - <code>True</code> </p> \n                <p>There is no better place to learn data science than Data Expert - <code>True</code> </p>\n                <p> Data analyst is a good job - <code>False</code>, it is the <b>best</b> job. </p>\n                <p>The answers to the questions above, <code>True</code> or <code>False</code>, are known in computer programming as the <b>boolean</b> data types. Booleans can only be one of two values, <code>True</code> or <code>False</code>, and when using them in Python, you must always <b>capitalize</b> the first letter (T and F). </p>\n                <p>You will be working with booleans quite often, so it is in your best interest to familiarize yourself with how they work.  Booleans are most commonly used in Python to compare two or more values, and we can do this by utilizing Python's <b>comparison operators</b>: </p>\n            <div class=\"lessonTable\">\n                <table align=\"center\">\n                    <tr>\n                        <th id=\"tableHeader\">Operator</th>\n                        <th id=\"tableHeader\">Meaning</th>\n                    </tr>\n                    <tr> \n                        <th><code><</code></th>\n                        <th>strictly less than</th>\n                    </tr>\n                    <tr>\n                        <th><code><=</code></th>\n                        <th>less than or equal to</th>\n                    </tr>\n                    <tr>\n                        <th><code>></code></th>\n                        <th>strictly greater than</th>\n                    </tr>\n                    <tr>\n                        <th><code>>=</code></th>\n                        <th>greater than or equal to</th>\n                    </tr>\n                    <tr>\n                        <th><code>==</code></th>\n                        <th>equal</th>\n                    </tr>\n                    <tr>\n                        <th><code>!=</code></th>\n                        <th>not equal</th>\n                    </tr>\n                    <tr>\n                        <th><code>is</code></th>\n                        <th>object identity</th>\n                    </tr>\n                    <tr>\n                        <th><code>is not</code></th>\n                        <th>negated object identity</th>\n                    </tr>\n            </table>\n            </div>\n            <p>The comparison operators can be used to compare any type of data - integers, floats, strings, and even booleans themselves.</p>\n            <div align=\"center\">\n                <img src=\"https://dataexpertimages.s3.amazonaws.com/Introduction+to+Python+Programming+for+Data+Science/2+-+Strings%2C+Boolean+%26+Variables/5+-+Boolean/boolean_1.png\" style=\"width:45%; height:45%;\">\n            </div> \n            <div align=\"center\"> \n                    <img src=\"https://dataexpertimages.s3.amazonaws.com/Introduction+to+Python+Programming+for+Data+Science/2+-+Strings%2C+Boolean+%26+Variables/5+-+Boolean/boolean_2.png\" style=\"width:40%; height:50%;\">\n            </div>\n            <div align=\"center\">\n                    <img src=\"https://dataexpertimages.s3.amazonaws.com/Introduction+to+Python+Programming+for+Data+Science/2+-+Strings%2C+Boolean+%26+Variables/5+-+Boolean/boolean_3.png\" style=\"width:40%; height:50%;\">\n            </div>\n\n            <p>Some things to note about comparing two or more strings:</p>\n            <ul>\n                <li> If the strings are exactly the same, which includes capitalization, then Python will return <code>True</code> when you check for their equality. </li>\n                <li> Although you probably will not be comparing strings in this way often, when using the greater than or less than comparison operators with strings:\n                    <ul>\n                        <li> all lower case letters are considered \"less than\" uppercase ones </li>\n                        <li>when comparing two letters of the same case, the one that comes first in the alphabet is \"less than\" any letters that come after it</li>\n                    </ul>\n                </li>\n            </ul>\n            <p>We can also use the <code>in</code> keyword to check whether a certain string is contained in another string.  Please note that capitalization <b>matters</b>.</p>\n            <div align=\"center\">\n                <pre>\n                 <code class=\"python codeBlock\">x = 5\nprint('llo' in 'hello world')\nprint('expert' in 'DataExpert')\nprint('Expert' in 'DataExpert')\n# Output \n# True\n# False \n# True \n                    </code>\n                </pre>\n            </div> \n            <p>For all of the comparisons above, we could have assigned the comparison expression to a variable. The value of that variable would be the boolean result of the expression, and therefore its data type would be boolean:</p>\n            <div align=\"center\">\n                <pre>\n                    <code class=\"python codeBlock\">greater_than = 5 > 6 # The value of this variable becomes True \nstudy = 'in' in 'studying' # The value of this variable becomes False \nprint(greater_than)\nprint(study)\n# Output\n# False\n# True \n                    </code>\n                </pre>\n            </div>\n            <p>We also frequently use booleans to filter data sets based on certain criteria.  We will learn more about this use case later on.</p>\n\n            <hr id=\"hrChallenge\">  \n\n            <h3 class=\"codingChallenge\"> Coding Challenge </h2>\n            <p>We have created a few variables for you in the text editor to the right. Compare these variables as follows:</p>\n                <ul> \n                    <li> assign the comparison <code>x</code> not equal to <code>y</code> to the variable <code>equal</code> </li>\n                    <li> assign the comparison <code>x * y</code> greater than <code>200</code> to the variable <code>product</code> </li>\n                    <li>  assign the comparison <code>nyc</code> equal to <code>fl</code> to the variable <code>state</code> </li>\n                    <li> check whether the last element of  <code>nyc</code> is equal to the last element of <code>fl</code> and assign it to the variable <code>last</code> (Hint: String Indexing & Slicing) </li>\n                    <li> check whether the 13<sup>th</sup> - 31<sup>st</sup> (inclusive) elements of <code>nyc</code> are in <code>fl</code> and assign that to the variable <code>isin</code> </li>\n                </ul>",
    "codedSlide": "T",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 126,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 2,
    "slideNumber": 6,
    "lesson": "Primitive Data Types",
    "slide": "Summary",
    "defaultCode": "",
    "htmlBody": "",
    "codedSlide": "F",
    "correctAnswer": null,
    "hint": null
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 131,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 3,
    "slideNumber": 1,
    "lesson": "Control Flow",
    "slide": "Introduction to Control Flow",
    "defaultCode": "print('hello')\nx = 35",
    "htmlBody": "<p>Hello world, new testing</p>",
    "codedSlide": "T",
    "correctAnswer": "print('Testing')",
    "hint": "None"
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 132,
  "fields": {
    "course": "Introduction to Python Programming",
    "courseNumber": 1,
    "lessonNumber": 3,
    "slideNumber": 2,
    "lesson": "Control Flow",
    "slide": "For Loops",
    "defaultCode": "print('test')",
    "htmlBody": "<p>Test</p>",
    "codedSlide": "T",
    "correctAnswer": "print('test')",
    "hint": "none"
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 211,
  "fields": {
    "course": "Intermediate Python",
    "courseNumber": 2,
    "lessonNumber": 1,
    "slideNumber": 1,
    "lesson": "Files & The CSV Module",
    "slide": "Introduction to Files",
    "defaultCode": "with open('test.csv') as f:\n    f.readlines()",
    "htmlBody": "<p>testing</p>",
    "codedSlide": "T",
    "correctAnswer": "<p>TEST</p>",
    "hint": "NONE"
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 212,
  "fields": {
    "course": "Intermediate Python",
    "courseNumber": 2,
    "lessonNumber": 1,
    "slideNumber": 2,
    "lesson": "Files & The CSV Module",
    "slide": "The Open Function",
    "defaultCode": "print('test')",
    "htmlBody": "<p>TEST</p>",
    "codedSlide": "T",
    "correctAnswer": "",
    "hint": ""
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 311,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 1,
    "lesson": "NumPy Arrays",
    "slide": "Course Overview",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> Course Overview </h2>\r\n\r\n<p>\r\n    Welcome to Data Manipulation with Python! In this course, we will explore the ways in which data professionals store and work with data.\r\n    We will be introduced to two new Python libraries called 'NumPy' and 'Pandas'. These are the bread and butter of a data professional's \r\n    toolbox, and, as you continue on your journey of becoming a DataExpert, you will learn to use them to bend data to your will. We will learn \r\n    about Numpy Arrays and Pandas DataFrames, two data structures used to hold data in a form that we can easily read, understand, and \r\n    manipulate. Then, we will look at all the ways we can use these structures to create, read, update, and transform our data.\r\n</p>\r\n\r\n<p>\r\n    By the end of this course, you will gain an understanding of:\r\n</p>\r\n\r\n    <ul>\r\n        <li>what Numpy Arrays and Pandas DataFrames are</li>\r\n        <li>how to import data into Python using dataframes </li>\r\n        <li>how to access and edit data in arrays and dataframes</li>\r\n        <li>the methods we can perform on arrays and dataframes</li>\r\n       <li>how to transform the shape of our arrays and dataframes</li>\r\n    </ul>\r\n\r\n<p>\r\n    Without further ado, let's get started! \r\n</p>",
    "codedSlide": "F",
    "correctAnswer": "",
    "hint": ""
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 312,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 2,
    "lesson": "NumPy Arrays",
    "slide": "Introduction to NumPy",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> Introduction to NumPy </h2>\r\n\r\n<p>\r\n    NumPy is short for 'Numerical Python'; it's one of the most foundational packages for numeric and scientific computation in Python.\r\n    It is built on top of the main ideas of linear algebra, using vector and matrix-like structures to perform lighting-fast calculations on entire\r\n    collections of data points. Many of these calculations are made readily available through functions built into the package, sparing you from\r\n    writing complex loops of any kind.  \r\n</p>\r\n\r\n<p>\r\n    Although NumPy excels in the arena of fast data computation, a data professional, such as yourself, will most often turn to the Pandas \r\n    library when performing analytics, especially when working with tabular data. The reason that we are starting off with the NumPy library is \r\n    due to the fact that Pandas is actually built on top of NumPy as it's foundation. If Pandas were a house, NumPy would be the bricks within \r\n    its walls.\r\n</p>\r\n\r\n<p>\r\n    The functionalities of the NumPy package that we will focus on include:\r\n</p>\r\n\r\n    <ul>\r\n        <li>array operations such as  indexing, filtering, and transformations</li>\r\n        <li>aggregating and summarizing the data in arrays</li>\r\n        <li>reshaping, stacking, and splitting arrays</li>\r\n    </ul>\r\n\r\n<p>\r\n    To begin using the NumPy package, we will first need to install and load it into our environments . Installing the NumPy package can be \r\n    done in two ways.\r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      If you are using the Anaconda package management system, input the following into your Anaconda Prompt window: \r\n      <ul class=\"code-list\">\r\n         <li> <code>conda install numpy</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      If you are not using a package management system, input the following into your command line window:\r\n      <ul class=\"code-list\">\r\n         <li> <code>pip install numpy</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n   To import the package into your python environment, simply include <code>import numpy as np</code> at the beginning of your program; \r\n   when this command is run, it will make available to you all the tools that NumPy has to offer. You will often see other Python users import their packages with something called an <i>alias</i>, that's the <code>as np</code> portion of our code. An alias simply gives you an alternate way of referring to your package. Although optional, aliases allow us to minimize the amount of code we write in the long run, increasing its efficiency as a result. Keep in mind that less code often translates into code that is more efficient and easier to read. \r\n</p>\r\n\r\n<p>\r\n   Before we move on to the next section, take a moment to practice installing and importing the NumPy library in the coding section to your \r\n   right. Although this code will not return anything, it'll be a great warm-up for the exercises up ahead.\r\n</p>",
    "codedSlide": "T",
    "correctAnswer": "",
    "hint": ""
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 313,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 3,
    "lesson": "NumPy Arrays",
    "slide": "NumPy Arrays",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> NumPy Arrays </h2>\r\n\r\n<p>\r\n   In the previous slide, we spoke about the importance of the NumPy package as the foundation of a DataExpert's skillset. NumPy allows for \r\n   lighting fast calculations through structures called <i>arrays</i>. Arrays are, simply, data containers that are able to hold a number of \r\n   values with the same data type. You can think of an array as a special type of list that can only hold a single data type and specializes in \r\n   fast calculations. \r\n</p>\r\n\r\n<p>\r\n   Although, unlike lists, arrays come in many shapes and can have an arbitrary number of dimensions. This is why an array is also commonly \r\n   referred to as an n-dimensional array or <i>ndarray</i>. A 1D-array is a single row of values with multiple columns. A 2D-array possesses \r\n   both rows and columns much like a table. A 3D-array looks like a cube, many 2D-arrays stacked on top of one another. Although our \r\n   imagination is limited to three dimensions, data can be represented in any number of dimensions making it possible for us to perform a \r\n   large number of complex calculations very quickly. Refer to the image below for a better idea of how you can think of arrays with different \r\n   dimensions\r\n</p>\r\n\r\n<h2 class=\"slide-header\"> PLACE IMAGE/GIF OF 1D,2D,3D ARRAYS HERE </h2>\r\n\r\n<p>\r\n   NumPy's computing speed comes from the way that calculations are performed. NumPy takes advantage of ndarray to perform element- \r\n   wise vector operations. This allows the computation of a large series of numbers to be broken down into smaller chunks so that many bite- \r\n   sized calculations occur at the same time. We will explore the various types of calculations we can perform with NumPy arrays, in more \r\n   detail, later on in the lesson.\r\n</p>\r\n\r\n<h2 class=\"slide-header\"> PLACE IMAGE/GIF OF ARRAY OPERATION HERE </h2>\r\n\r\n<p>\r\n  Throughout the course, we may refer to NumPy arrays as ndarrays or simply arrays. Keep in mind that, for our purposes, all of these terms \r\n   may be used interchangeably. \r\n</p>\r\n\r\n<p>\r\n   Let's push onward and explore all the different ways we can create arrays in Python using the NumPy library.\r\n</p>",
    "codedSlide": "F",
    "correctAnswer": "",
    "hint": ""
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 314,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 4,
    "lesson": "NumPy Arrays",
    "slide": "Creating Arrays",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> Creating Arrays </h2>\r\n\r\n<p>\r\n   There are a multitude of ways to create NumPy arrays. The simplest way, is to use the <b>array</b> function from the NumPy library. This \r\n   function takes in any sequence-like object as input and creates a array out of it. The best candidate for this function is a list. Passing a single \r\n   list to the function results in a 1D-array, while a nested list of lists will create a multidimensional array. There deeper your nested list, the \r\n   greater number of dimensions your array will possess.\r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      1D-Array:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>np.array([1, 2, 3])</code> </li>\r\n         <li> Out: <code>array([1, 2, 3])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      2D-Array: \r\n      <ul class=\"code-list\">\r\n         <li> <code>np.array([[1, 2, 3], [4, 5, 6]])</code> </li>\r\n         <li> Out: <code>array([[1, 2, 3], \r\n                                              [4, 5, 6]])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      3D-Array: \r\n      <ul class=\"code-list\">\r\n         <li> <code>np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])</code> </li>\r\n         <li> Out: <code>array([[[1, 2], \r\n                                               [3, 4]], \r\n                                              [[5, 6], \r\n                                               [7, 8]]])</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n   You can access an array's dimensions using its <i>attributes</i>. Attributes are properties objects possess which you can \r\n   access to learn more information about their structure. We access attributes using dot notation. You can view the dimensions of an array \r\n   using the <b>ndim</b> or <b>shape</b> attributes. \r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      .ndim:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>arr1 = np.array([1, 2, 3])</code> </li>\r\n         <li> In: <code>arr1.ndim</code> </li>\r\n         <li> Out: <code>1</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      .shape: \r\n      <ul class=\"code-list\">\r\n         <li> In: <code>arr1.shape</code> </li>\r\n         <li> Out: <code>(1, 3)</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n   Using <code>arr1.ndim</code> outputs a single number, the number of dimensions of the array. Meanwhile, <code>arr1.shape</code> \r\n   returns a tuple of numbers, each number being the length of the corresponding array dimensions.\r\n</p>\r\n\r\n<p>\r\n   Note that, when creating the arrays, each element we used was an integer or int. Remember that arrays can only hold a single data type at a \r\n   time. The array function will try to infer the most appropriate data type to provide an array upon creation based on the values provided. The \r\n   datatype of an array can be accessed using the <b>dtype</b> attribute. This will return the data type of the array.\r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      .dtype:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>arr1.dtype</code> </li> \r\n         <li> Out: <code>dtype('int32')</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n   Three other common ways to create NumPy arrays on the fly, include the <b>zeros</b>, <b>ones</b>, and <b>empty</b> functions. Each \r\n   of these functions take in either a single number, representing the length of the 1D-array you would like to create, or a tuple of numbers \r\n   representing the length of each dimension of the array you would like to create. <code>np.zeros</code> creates an array with each \r\n   element being a zero. <code>np.ones</code> creates an array filled with ones, and <code>np.empty</code> creates an array with no real \r\n   values. Don't be fooled by <code>np.empty</code>, it may return an array of what look to be zeros, but they are actually filler elements \r\n   with no real values.\r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      .zeros:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>np.zeros(5)</code> </li>\r\n         <li> Out: <code>array([0, 0, 0, 0, 0])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      .ones: \r\n      <ul class=\"code-list\">\r\n         <li> In: <code>np.ones((2, 3))</code> </li>\r\n         <li> Out: <code>array([[1, 1, 1],\r\n                                              [1, 1, 1]])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      .empty: \r\n      <ul class=\"code-list\">\r\n         <li> In: <code>np.empty((1, 2, 3))</code> </li>\r\n         <li> Out: <code>array([[[0, 0]],\r\n                                              [[0, 0]],\r\n                                              [[0, 0]]])</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n   We've just learned some of the most popular ways of creating arrays. There are loads of other ways to make them which you can \r\n   explore on the official NumPy website <a href= \"https://numpy.org/doc/stable/reference/routines.array-creation.html#routines-array-creation\" \r\n   target= \"_blank \">here</a>. Take a quick look, and evaluate some of the more advanced methods of creating specific NumPy arrays in your \r\n   source code editor. \r\n</p>\r\n\r\n<hr class=\"hr-challenge\">\r\n\r\n<h3 class=\"coding-challenge-heading\">\r\n   Coding Challenge \r\n</h3> \r\n\r\n<p> \r\n   Now it's your turn! Let's practice creating NumPy areas as we've just learned in this slide. Remember that you will need to import the NumPy \r\n   library before you can use any of it's functions. Your task is to create the arrays described below: \r\n</p>\r\n\r\n<ul>\r\n   <li> Create a 1D-array using the following list: <code>[2, 4, 6.0, 8]</code> </li>\r\n   <li> Create a 2D-array of ones where the first dimension has a length of 2 and the second dimension has a length of 3 </li>\r\n   <li> Create an empty 3D-array where each dimension has a length of 5 </li>\r\n</ul>",
    "codedSlide": "T",
    "correctAnswer": "np.array([2, 4, 6.0, 8])\r\nnp.ones((2, 3))\r\nnp.empty((5, 5, 5))",
    "hint": "You will need to take advantage of the array, ones, and empty functions form the NumPy library."
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 315,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 5,
    "lesson": "NumPy Arrays",
    "slide": "Array Data Types",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> Array Data Types </h2>\r\n\r\n<p>\r\n   When we work with NumPy arrays, our computers need to know what <i>data type</i> to store our elements in memory as. Data types provide NumPy a lot of flexibility especially when it comes to allocating memory for large datasets. Data types are used by the computer to determine how many bits, or bytes, of memory to allocate for a particular value. Based on the data type, a specific amount of memory will be set aside for that value. Having control over how much memory our data uses is critical when we are working with very large datasets or attempting to optimize our calculations or increase processing speed. For our purposes, we'll be focusing on using data types to perform simple calculations and appropriately store our data.  \r\n</p>\r\n\r\n<p>\r\n\tThere are a few general classes of data types that you should be aware of. They are:\r\n</p>\r\n\r\n<ul>\r\n\t<li> Intiger </li>\r\n\t<li> Floating Point </li>\r\n\t<li> Complex </li>\r\n\t<li> Boolean </li>\r\n\t<li> String </li>\r\n\t<li> Object </li>\r\n</ul>\r\n\r\n<p>\r\n\tThere are a whole host of specific numeric data types to suite all your memory specifications. The naming convention of numeric data types, in NumPy, is the name of the type followed by a number representing the number of bits of each element. Often, when performing data analysis or data science using arrays, the <b>int32</b> and <b>float64</b> are all the data types you will need to perform your run-of-the-mill calculations and analyses. As long as you understand what class of data type you are looking for, you can refer to NumPy's <a href=\"https://numpy.org/devdocs/user/basics.types.html\" target= \"_blank \">official documentation</a> for a full list of data types supported by the library. \r\n</p>\r\n\r\n\r\n<p>\t\r\n\tAs mentioned in the previous slide, when you create a NumPy array, your computer automatically attempts to assign it an appropriate data type based on the values inside it. At times, NumPy may just miss its mark and apply the wrong data type or, we'd like to change the data type of our array. Towards these goals, there are functions and methods that NumPy provides which makes switching between data types quick and easy. To change an arrays data type during creation, you can explicitly set the <code>dtype</code> attribute to the data type of your choice within the  <code>np.array()</code> function.\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> <code>np.array([-2, -1, 0, 1, 2], dtype = int32)</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tTo change the data type of an array <i>after</i> it has been created, use the <b>astype</b> method which takes the desired data type, to change to, as input.\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> <code>arr1 = np.array([-2, -1, 0, 1, 2], dtype = int32)</code> </li>\r\n\t<li> <code>arr1.astype(float)</code> </li>\r\n</ul>\r\n\r\n<hr class=\"hr-challenge\">\r\n\r\n<h3 class=\"coding-challenge-heading\">\r\n   Coding Challenge \r\n</h3> \r\n\r\n<p> \r\n   Let's practice changing the data type of our arrays. Your task is to do the following: \r\n</p>\r\n\r\n<ul>\r\n   <li> Create a floating point 1D-array using the following list of strings: <code>['2.1', '4', '6.0', '8.3']</code> </li>\r\n   <li> Using the array you have just created, change its data type to an integer </li>\r\n</ul>\r\n\r\n<p>\r\n\tKeep in mind that practice makes perfect, and you will need to use everything you have learned from past lessons to complete the exercises that follow.\r\n</p>",
    "codedSlide": "T",
    "correctAnswer": "arr = np.array(['2.1', '4', '6.0', '8.3'], dtype=float64)\r\narr.astype(int)",
    "hint": "When creating the array, use the dtype attribute to set the data type. To change the data type of a pre-existing array, use the <code>astype</code> function."
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 316,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 6,
    "lesson": "NumPy Arrays",
    "slide": "Array Indexing & Subsetting",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> Array Indexing & Subsetting </h2>\r\n\r\n<p>\r\n\tWhen wrangling our data, there will be times when we want to manipulate small chunks or individual elements of our arrays. The way we do this is by, what we call, <b>indexing</b>. Indexing a 1D-array works in much the same way as indexing a Python list; you utilize square brackets <code>[ ]</code> to specify the <i>index</i>, or position, of the value in the array that you want to extract. As always, the index values are read left to right and begin at 0. To extract a subset of the array, you make use of the same bracket notation but include two numbers separated by a colon to denote the group of index positions you would like to be returned. Remember that the final index is excluded from the result.\r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      Indexing a single element:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>arr = np.array([1, 2, 3, 4, 5])</code> </li>\r\n\t\t <li> In: <code>arr[3]</code> </li>\r\n\t\t <li> Out: <code>4</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Obtaining a subset: \r\n      <ul class=\"code-list\">\r\n\t\t <li> In: <code>arr[1:3]</code> </li>\r\n\t\t <li> Out: <code>[2, 3]</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n\r\n<p>\r\n\tA distinction between Python list indexing and array indexing is that a subset of an array does not create a copy of the original array but is, instead, a reference to the original array. This means that any changes made to the subset will be reflected in the original array as well. For example:\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>arr = np.array([1, 2, 3, 4, 5])</code> </li>\r\n\t<li> In: <code>arr_sub = arr[2:5]</code> </li>\r\n\t<li> In: <code>arr_sub</code> </li>\r\n\t<li> Out: <code>[3, 4, 5]</code> </li>\r\n       <br>\r\n\t<li> In: <code>arr_sub[0] = 99</code> </li>\r\n\t<li> In: <code>arr_sub</code> </li>\r\n\t<li> Out: <code>[99, 4, 5]</code> </li>\r\n       <br>\r\n\t<li> In: <code>arr</code> </li>\r\n\t<li> Out: <code>[1, 2, 99, 4, 5]</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tAs you can see, changing an element in the subset variable of the original array caused the same element to change in the original array as well. If you want to copy a slice of the array when indexing, you will want to add on the <b>copy</b> method to the end of your index command.\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> <code>arr[2:5].copy()</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tIndexing multidimensional arrays is not much different from indexing 1D-arrays. Although, because multidimensional arrays possess smaller arrays as their element, a single index will return another array rather than a single value. A single element may be accessed by recursively indexing on each array level. For example:\r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      Single index:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>arr = np.array([[1, 2, 3], [4, 5, 6]])</code> </li>\r\n\t\t <li> In: <code>arr[1]</code> </li>\r\n\t\t <li> Out: <code>[4, 5, 6]</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Single value: \r\n      <ul class=\"code-list\">\r\n\t\t <li> In: <code>arr[1][2]</code> </li>\r\n\t\t <li> Out: <code>6</code> </li>\r\n\t\t <li> In: <code>arr[1, 2]</code> </li>\r\n\t\t <li> Out: <code>6</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n\tYou can use colon notation to obtain slices of an nD-arrray as well. When working with a 2D-array, you can visualize this as the first slice selecting the rows and the second slice as selecting the columns of the array. \r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>arr[:][1:3]</code> </li>\r\n\t<li> Out: <code>array([[2, 3], \r\n\t\t\t\t\t\t   [5, 6]])</code> </li>\r\n        <br>\r\n\t<li> In: <code>arr[:, 1:3]</code> </li>\r\n\t<li> Out: <code>array([[2, 3], \r\n\t\t\t\t\t\t   [5, 6]])</code> </li>\r\n</ul>\r\n\r\nADD A VISUALIZATION OF SLICING ND-ARRAYS\r\n\r\n<p>\r\n\tNote that you can also use negative numbers when subsetting an array. This will allow you to grab elements starting from the end of an array. Keep in mind that backwards indexing starts with -1, as oppose to forward indexing which starts with 0.\r\n</p>\r\n\r\n<p>\r\n\tAs is the case with the 1D-array, setting a subset of a nD-array to a single value will replace all of the selected elements with the specified value. Again, you would use the <code>.copy()</code> method if you want to work on the subset independently from the original array.\r\n</p>\r\n\r\n<p>\r\n\tAnother way of indexing arrays is to get all the positions where a value meets some condition, this is called <b>boolean indexing</b>. With boolean indexing, we use the familiar bracket notation but instead of numbers and colons, we use logical statements and operators. As a quick refresher, we can use <code> <, >, ==, !=, <=, >= </code> to evaluate logical statements, we can use <code> & ('and'), | ('or')</code> to chain logical statements together, and the <code> ~ </code> character can be used to negate entire logical statements. Below is an example where we  pull all of the even elements in an nD-array: \r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>arr = np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]])</code> </li>\r\n\t<li> Out: <code>array([[1,2,3,4,5], \r\n\t\t\t\t\t\t   [6,7,8,9,10],\r\n\t\t\t\t\t\t   [11,12,13,14,15]])</code> </li>\r\n        <br>\r\n\t<li> In: <code>arr % 2 == 0</code> </li>\r\n\t<li> Out: <code>array([[False, True, False, True, False],\r\n       \t\t\t\t\t   [True, False, True, False, True],\r\n       \t\t\t\t\t   [False, True, False, True, False]])</code> </li>\r\n        <br>\r\n\t<li> In: <code>arr[arr % 2 == 0]</code> </li>\r\n\t<li> Out: <code>array([2, 4, 6, 8, 10, 12, 14])</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tIn the code above, we first evaluated the <code>arr</code> 2D-array using a the logical statement <code>arr % 2 == 0</code>. This checked whether each element in the array has a remainder of 0 when divided by two, this is the affect of the 'modulo' (%). This returns the array with each element replaced by a 'True' or 'False' value. Now, when we include this statement inside the brackets we normally use for index notation, we are returned a new 1D-array with only the elements of the original array that correspond to a 'True' value from the logical statement. Note that the resulting 1D-array is a new array and not just a reference to the original array which is what we get with regular indexing. When using boolean indexing, the result is always a new array; no need to use the <code>.copy()</code> method.\r\n</p>\r\n\r\n<p>\r\n\tHere is an example where we extract all of the even elements that are also greater than or equal to 10:\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>arr[(arr % 2 == 0) & (arr >= 10)]</code> </li>\r\n\t<li> Out: <code>array([10, 12, 14])</code> </li>\r\n</ul>\r\n\r\n<hr class=\"hr-challenge\">\r\n\r\n<h3 class=\"coding-challenge-heading\">\r\n   Coding Challenge \r\n</h3> \r\n\r\n<p> \r\n   Now it's your turn. Put your array indexing skills to the test with the following challenge: \r\n</p>\r\n\r\n<ul>\r\n   <li> Create a 2D-array with the top row being <code>[0, 2, 4, 6, 8]</code> and the bottom row being <code>[1, 3, 5, 7, 9]</code> </li>\r\n   <li> Using the array you have just created, produce the following values using indexing and subsetting techniques: </li>\r\n\t\t<ul>\r\n\t      <li> <code> 4 </code> </li>\r\n\t      <li> <code> array([[6, 8],\r\n\t\t  \t\t\t\t\t [7, 9]]) </code> </li>\r\n\t\t  <li> <code> array([[0, 2, 4],\r\n\t\t  \t\t\t\t\t [1, 3, 5]]) </code> </li>\r\n\t    </ul>\r\n</ul>",
    "codedSlide": "T",
    "correctAnswer": "arr[0][2] or arr[0, 2]\r\narr[3:5][:] or arr[3:5, :]\r\narr[arr <= 5]",
    "hint": "Because this is a multidimensional array, you may want to chain multiple brackets together to access the elements you need. Consider if you can use a logical statement to access specific elements across each array nested in the 2D-array."
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 317,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 7,
    "lesson": "NumPy Arrays",
    "slide": "Array Calculations",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> Array Calculations </h2>\r\n\r\n<p>\r\n\tAs we've learned, NumPy is a fantastic tool for performing large-scale calculations, quickly. This is because it takes advantage of <i>vectorization</i> to perform multiple calculations in parallel, or at the same time. When we perform arithmetic calculations, such as subtraction and addition, between two arrays with the same dimensions, the operations occur <i>element-wise</i> meaning each element of the first array is added to, or subtracted by, the corresponding element in the second array. \r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      Array Addition:\r\n      <ul class=\"code-list\">\r\n         <li> In: <code>arr1 = np.array([0, 1, 2])</code> </li>\r\n\t\t <li> In: <code>arr2 = np.array([3, 4, 5])</code> </li>\r\n\t\t <li> In: <code>arr1 + arr2</code> </li>\r\n\t\t <li> Out: <code>array([3, 5, 7])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Array Subtraction: \r\n      <ul class=\"code-list\">\r\n\t\t <li> In: <code>arr1 - arr2</code> </li>\r\n\t\t <li> Out: <code>array([-3, -3, -3])</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n\tScalar operations, when an array is multiplied, divided, or exponentiated by a number, apply to each individual element in the array. \r\n</p>\r\n\r\n<ul>\r\n   <li>\r\n      Scalar Multiplication:\r\n      <ul class=\"code-list\">\r\n\t\t <li> In: <code>arr1 * 5</code> </li>\r\n\t\t <li> Out: <code>array([0, 5, 10])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Scalar Division: \r\n      <ul class=\"code-list\">\r\n\t\t <li> In: <code>arr1 / 3</code> </li>\r\n\t\t <li> Out: <code>array([1, 1.33333, 1.66667])</code> </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Scalar Exponentiation: \r\n      <ul class=\"code-list\">\r\n\t\t <li> In: <code>arr2 ** 2</code> </li>\r\n\t\t <li> Out: <code>array([9, 25, 49])</code> </li>\r\n      </ul>\r\n   </li>\r\n</ul>\r\n\r\n<p>\r\n\t Given that two arrays have the same dimensions, we can also compare arrays using logical operators and obtain a boolean array.\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>arr1 < arr2</code> </li>\r\n\t<li> Out: <code>array([True, True, True])</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tIt is possible to perform arithmetic on arrays of different dimensions. NumPy achieves this via <i>broadcasting</i>. Broadcasting is outside of the scope of this course but you can learn more <a href= \"https://www.tutorialspoint.com/numpy/numpy_broadcasting.htm\" target= \"_blank \">here</a>.\r\n</p>\r\n\r\n<p>\r\n\tNumPy comes with numerous built-in functions, also called <i>universal functions</i> or ufuncs, that perform element-wise operations on the values in an array. Some take in a single array as input and return a single array, these are referred to as <i>unary functions</i>. An example of such a function is <b>sqrt</b> which returns an array of the square root of each element in an array. Others, take in two arrays and return a single array, these are called <i>binary functions</i>. An example of this is <b>maximum</b> which compares the elements between both inputted arrays and returns the larger of each value pair in a single array. \r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>np.sqrt(arr1)</code> </li>\r\n\t<li> Out: <code>array([0, 1, 1.41421])</code> </li>\r\n</ul>\r\n\r\n<br>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>np.maximum(arr1, arr2)</code> </li>\r\n\t<li> Out: <code>array([3, 4, 5])</code> </li>\r\n</ul>\r\n\r\n<p>\r\nNumPy provides a wide array of ufuncs spanning almost every mathematical transformation and comparison you can think of. Explore all the possible functions <a href=\"https://numpy.org/doc/stable/reference/ufuncs.html#available-ufuncs\" target= \"_blank \">here</a>.\r\n</p>\r\n\r\n<hr class=\"hr-challenge\">\r\n\r\n<h3 class=\"coding-challenge-heading\">\r\n   Coding Challenge \r\n</h3> \r\n\r\n<p> \r\n   Let's practice some array calculations with the following challenge: \r\n</p>\r\n\r\n<ul>\r\n   <li> Create two NumPy arrays, using the lists [0, 3, 4, 7] and [1, 2, 5, 6]\r\n   <li> Add the arrays you have created and multiply each element by 2 </li>\r\n   <li> Take the resulting array and calculate the natural logarithm of each element within the array</li>\r\n</ul>",
    "codedSlide": "T",
    "correctAnswer": "You may need to use a NumPy ufunc to calculate the natural logarithm of each element in an array.",
    "hint": "arr = (arr1 + arr2) * 2\r\nnp.log(arr)"
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 318,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 8,
    "lesson": "NumPy Arrays",
    "slide": "Array Transformations",
    "defaultCode": "import numpy as np\r\narr1 = np.array([[1, 9],\r\n                          [2, 8],\r\n                          [3, 7]])\r\narr2 = np.array([[4, 5],\r\n                          [4, 5]])",
    "htmlBody": "<h2 class=\"slide-header\"> Array Transformations </h2>\r\n\r\n<p>\r\n\tAt times we will want to manipulate the shape of our NumPy arrays. Manipulations on the array structure can be broudly categorized into three main actions: <i>reshaping</i>, <i>stacking</i>, and <i>splitting</i>.\r\n</p>\r\n\r\n<p>\r\n\tWhen reshaping an array, we are able to change the dimensions of the array by shuffling around the elements contained within the array. There are several methods that we can use to acheive this. The <b>reshape</b> method takes in a list a tuple of numbers and returns a coppy of the original array with a modified shape. If reshaping to a 3D-array, you may interpret the inputs as (number of rows, number of columns, number of layers).\r\n</p>\r\n\r\n<ul class=\"code-list\">\r\n\t<li> In: <code>arr = np.array([[1, 2, 3], [4, 5, 6]])</code> </li>\r\n\t<li> In: <code>arr</code> </li>\r\n\t<li> Out: <code>array([[1, 2, 3],\r\n\t\t\t\t\t\t   [4, 5, 6]])</code> </li>\r\n\t<br>\r\n\t<li> In: <code>arr.shape</code> </li>\r\n\t<li> Out: <code>(2, 3)</code> </li>\r\n\t<br>\r\n\t<li> In: <code>arr.reshape(3, 2)</code> </li>\r\n\t<li> Out: <code>array([[1, 2],\r\n\t\t\t\t\t\t   [3, 4],\r\n\t\t\t\t\t\t   [5, 6]])</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tIf you want to reshape an array itself without making a copy of it, you'll need to use the <b>resize</b> method. It works much in the same way as <code>.reshape()</code> and takes in the same input as well. you'll notice that when we apply the method, nothing is returned. That is because, since the resize method does not create a copy of the array before manipulating it, there is nothing to return. Only after calling the original array do we see the changes that have been made. \r\n</p>\r\n\r\n<ul>\r\n\t<li> In: <code>arr.resize(3, 2)</code> </li>\r\n\t<li> In: <code>arr</code> </li>\r\n\t<li> Out: <code>array([[1, 2],\r\n\t\t\t\t\t\t   [3, 4],\r\n\t\t\t\t\t\t   [5, 6]])</code> </li>\r\n</ul>\r\n\r\n<p>\r\n\tSome methods allow us to quickly reshape arrays in specific ways such asthe <b>ravel</b> and <b>transpose</b> method. The ravel method 'flattens' the array turning it into a 1D-array. The elements will preserve their order, reading them from left to right in their current array. The transpose method, denoted by 'T', swaps rows and columns, turning the first row into the first column, and vice-versa, for all rows and columns in the array. Both of these methods create copies of the arrays they are applied to.\r\n</p>\r\n\r\n\t<li> In: <code>arr</code> </li>\r\n\t<li> Out: <code>array([[1, 2, 3],\r\n\t\t\t\t\t\t   [4, 5, 6]])</code> </li>\r\n\t<br>\r\n\t<li> In: <code>arr.ravel()</code> </li>\r\n\t<li> Out: <code>array([[1, 2, 3, 4, 5, 6])</code> </li>\r\n\t<br>\r\n\t<li> In: <code>arr.T</code> </li>\r\n\t<li> Out: <code>array([[1, 2],\r\n\t\t\t\t\t\t   [3, 4],\r\n\t\t\t\t\t\t   [5, 6]])</code> </li>\r\n</ul>\r\n\r\n<br>\r\n\r\n<p>\r\n\tIf your goal is to stack arrays, to create a larger, single array, then the <b>vstack</b> and <b>hstack</b> functions are the way to go. The vstack function takes in a tuple of two or more arrays and stacks them vertically while the hstack function stacks the arrays horizontally.\r\n</p>\r\n\r\n\t<li> In: <code>arr1 = np.array([1, 2, 3])</code> </li>\r\n\t<li> In: <code>arr2 = np.array([4, 5, 6])</code> </li>\r\n\t<br>\r\n\t<li> In: <code>np.vstack(arr1, arr2)</code> </li>\r\n\t<li> Out: <code>array([[1, 2, 3],\r\n\t\t\t\t\t\t   [4, 5, 6]])</code> </li>\r\n\t<br>\r\n\t<li> In: <code>np.hstack(arr1, arr2)</code> </li>\r\n\t<li> Out: <code>array([[1, 2, 3, 4, 5, 6],\r\n\t\t\t\t\t\t   [4, 5, 6]])</code> </li>\r\n</ul>\r\n\r\n<br>\r\n\r\n<p>\r\n\tNow, suppose you would like to perform the opposite and split a large array into multiple, smaller arrays, then you'll want to use the <b>vsplit</b> and <b>hsplit</b> functions. The hsplit function takes in an array to be split as well as a number, representing the number of equally sized arrays to create, or a tuple of numbers, dictating after which columns the splitting should take place. The vsplit functions does much the same except the splitting occurs along the vertical axis as opposed to the horizontal one.\r\n</p>\r\n\r\n<ul>\r\n\t<li> In: <code>arr</code> </li>\r\n\t<li> Out: <code>array([[2 3 0 1]\r\n\t \t\t\t\t\t   [4 5 8 9]\r\n \t\t\t\t\t\t   [5 6 7 7]])</code> </li>\r\n\t<br>\r\n\t<li> In: <code>np.hsplit(arr, 2)</code> </li>\r\n\t<li> Out: <code>[array([[2, 3],\r\n       \t\t\t\t\t\t[4, 5],\r\n       \t\t\t\t\t \t[5, 6]]), \r\n\t\t\t\t\t array([[0, 1],\r\n       \t\t\t  \t\t\t[8, 9],\r\n       \t\t\t\t\t    [7, 7]])]</code> </li>\r\n\t<br>\r\n\t<li> In: <code>np.hstack(arr, (1, 3))</code> </li>\r\n\t<li> Out: <code>[array([[2],\r\n       \t\t\t\t\t\t[4],\r\n       \t\t\t\t\t \t[5]]), \r\n\t\t\t\t\t array([[3, 0],\r\n       \t\t\t  \t\t    [5, 8],\r\n       \t\t\t\t\t \t[6, 7]]), \r\n\t\t\t\t\t array([[1],\r\n       \t\t\t\t\t \t[9],\r\n       \t\t\t\t\t \t[7]])]</code> </li>\r\n</ul>\r\n\r\n<hr class=\"hr-challenge\">\r\n\r\n<h3 class=\"coding-challenge-heading\">\r\n   Coding Challenge \r\n</h3> \r\n\r\n<p> \r\n   Let's practice some array transformations with the following challenge: \r\n</p>\r\n\r\n<ul>\r\n   <li> Given the NumPy arrays provided to you, change arr1's shape to (2, 3) </li>\r\n   <li> Now horizontally stack the transformed arr1 array with arr2 </li>\r\n   <li> Finally, split the the composite array on the 2nd and 3rd columns </li>\r\n</ul>",
    "codedSlide": "T",
    "correctAnswer": "arr1.resize(2,3)\r\nharr = np.hstack((arr1,arr2))\r\nfinal_arr = np.hsplit(harr,(2,3))",
    "hint": "You will need to use a function to reshape, stack, and split the arrays."
  }
},
{
  "model": "courses.courselessonslidemaster",
  "pk": 319,
  "fields": {
    "course": "Data Manipulation with Python",
    "courseNumber": 3,
    "lessonNumber": 1,
    "slideNumber": 9,
    "lesson": "NumPy Arrays",
    "slide": "NumPy Summary",
    "defaultCode": "",
    "htmlBody": "<h2 class=\"slide-header\"> NumPy Summary </h2>\r\n\r\n<p>\r\n\tIn this module, we were introduced to the NumPy library and explored the data structures, functions, and methods that make it such a powerful tool for data manipulation. \r\n</p>\r\n\r\n<p>\r\n\tWe learned about the <i>NumPy array</i>, the primary data storage receptacle in NumPy. We discussed how the flexible nature of these arrays allows the user to perform many calculations at once using element-wise vector operations. This is where NumPy's processing speed comes from.\r\n</p>\r\n\r\n<p>\r\n\tWe explored the different ways we can create arrays from scratch using Python lists. We looked at how we can create arrays of varying dimensions by nesting lists as well as using built-in NumPy functions such as .zeroes(), .ones(), and .empty(). We then accessed the attributes of these arrays to view their shapes, data types, and dimensions.\r\n</p>\r\n\r\n<p>\r\n\tWe continued on by diving deeper into the world of array data types to control the amount of memory of computer uses to store our data.\r\n</p>\r\n\r\n<p>\r\n\tPressing onward, we tackled the task of indexing and subsetting our data to access the data we need at the individual data point and data group level.\r\n</p>\r\n\r\n<p>\r\n\tAfterwards, we were ready to perform calculations on our data using element-wise arithmetic between arrays, scalar operations between arrays and numbers, and applying functions to the rows and columns of our arrays.\r\n</p>\r\n\r\n<p>\r\n\tFinally, we closed with a look at the ways we can transform our arrays and change their shapes. This was achieved through functions that allowed us to reshape, stack, and split arrays. \r\n</p>\r\n\r\n<p>\r\n\tThere is still much more out there for us to learn about the NumPy library. I encourage you to dive into NumPy's rich documentation to see what else you can learn about arrays. But, using what we've already learned, we are now ready to move on to the Pandas library. The bread and butter of every DataExpert's toolbox. \r\n</p>",
    "codedSlide": "F",
    "correctAnswer": "",
    "hint": ""
  }
},
{
  "model": "authentication.customuser",
  "pk": 1,
  "fields": {
    "password": "pbkdf2_sha256$180000$9NrDYyxWBFri$zhLv06CUVOWzD9l0nrtIewSjLhLy8IzYM1+GC2+pkg0=",
    "last_login": "2020-06-20T14:51:29.383Z",
    "is_superuser": true,
    "first_name": "",
    "last_name": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2020-05-30T17:38:57.690Z",
    "email": "dataexpertnyc@gmail.com",
    "name": "Danny",
    "location": null,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "authentication.customuser",
  "pk": 2,
  "fields": {
    "password": "pbkdf2_sha256$180000$UnyjoPMY4ZsT$+Kj6sWIEpsCsgixliEXrDxM4mEBQBdHBneYmROE5Pnc=",
    "last_login": "2020-06-15T00:48:48.866Z",
    "is_superuser": true,
    "first_name": "",
    "last_name": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2020-06-03T22:13:52.885Z",
    "email": "petersalamon14@gmail.com",
    "name": "Peter Salamon",
    "location": null,
    "groups": [],
    "user_permissions": []
  }
}
]
