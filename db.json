[{"model": "courses.courselessonslidemaster", "pk": 111, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 1, "slideNumber": 1, "lesson": "Introductory Python", "slide": "Course Overview", "defaultCode": "", "htmlBody": "<h2 class=\"slide-header\">Course Overview</h2><p>Welcome to DataExpert, and congratulations on the start of your journey to becoming a data expert! This introductory course will cover the basics of the Python programming language. No prior programming experience is required, as we will teach you all that you need to know to become a competent Python programmer, with a specific focus on data science use cases. Not only is Python one of the most popular programming language amongst data experts (Data Analysts, Data Scientists, Data Engineers), it is one of the most popular programming languages out there! In fact, according to GitHub's 2019 annual developer survey, known as Octoverse, \"Python outranked Java as the second most popular language on GitHub by repository contributors.\"<br><br>If this is your first foray into the world of computer programming, learning Python is an excellent programming language to begin with because it is a <a href=\"https://en.wikipedia.org/wiki/General-purpose_programming_language\" target=\"_blank\">general-purpose</a>, <a href=\"https://en.wikipedia.org/wiki/High-level_programming_language\" target=\"_blank\">high-level</a> programming language. In short, Python can be used to accomplish a wide array of distinct tasks (general-purpose), and it is fairly straightforward to understand and write Python code, as the language implementation <a href=\"https://computersciencewiki.org/index.php/Abstraction\" target=\"_blank\">abstracts</a> a lot of the complexities associated with how the code is actually executed (high-level). This allows you to easily write code that will do what you want in a simple and understandable manner.<br><br> Each one of our lessons is structured in a way that will allow you to:<ul><li>learn new concepts</li><li>build upon previous concepts</li><li>apply your newfound knowledge via interactive coding challenges and guided projects</li></ul>A single lesson within a course is composed of multiple slides. The majority of slides will contain a text editor for you to write your code, buttons for you to be able to execute your code and check whether or not you completed the coding challenge correctly, and an output area that will display the results of your code being executed. This way you will stay engaged, interested, and be able to retain as much information as possible. The course material is dense, yet succinct, and we try to break down complex topics into simple and understandable chunks. The difficulty of the material will increase steadily, giving you the opportunity to slowly accumulate the skill-set and knowledge necessary to complete our guided projects and eventually get a job!<br><br>Throughout our lessons you will see that certain words and phrases link to an article or documentation online, which will provide a more in depth explanation of that topic. We highly suggest that you dedicate some time to do this extra reading, as it will help you gain a better understanding of the whys and hows. If we come across an article that does a great job of explaining an important topic and/or goes into greater depth on it than we do, we will link you to it. In addition, everything Python related is documented online, and being able to understand this documentation is an indispensable skill that will go a long way. If the documentation seems intimidating and overwhelming at first, do not feel discouraged. As you gain more knowledge and experience while going through our lessons, you will slowly gain the ability to decipher more complex technical information, such as programming documentation. Remember, Rome was not built in a day, and you will not become a data expert in a day. With hard work, dedication, and persistence, everything will come together and you will prevail. Please be patient, stay excited, and get ready to become a true DataExpert! Now, let's get started.</p>", "codedSlide": "F", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 112, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 1, "slideNumber": 2, "lesson": "Introductory Python", "slide": "Arithmetic Operations", "defaultCode": "", "htmlBody": "<h2 class=\"slide-header\">Arithmetic Operations</h2><p>We write code in a programming language to instruct the computer to perform a single, or series, of tasks for us. The most basic of these tasks are arithmetic operations - addition, subtraction, multiplication, division, and exponentiation. To perform these calculations, we have to let the computer know (by giving it commands):</p><ul><li>which numbers to perform the calculation(s) on</li><li>which calculation(s) to perform</li></ul><p>For the second bullet point above, we make use of Python\u2019s <b>arithmetic operators</b>, which perform calculations on two or more numbers, known as <b>operands</b>. Before we continue, we want to point out that any text within a slide with a light gray background, such as <code>print('hello world')</code>, is Python code. Now back to arithmetic operators:</p><ul><li> Addition Operator: <code> + </code> <ul class=\"code-list\"> <li> <code>6 + 2</code> </li> </ul></li> <li> Subtraction Operator: <code> - </code> <ul class=\"code-list\"><li> <code>6 - 2</code> </li> </ul></li> <li> Multiplication Operator: <code> * </code> <ul class=\"code-list\"><li> <code>6 * 2</code> </li> </ul></li> <li> Division Operator: <code> / </code> <ul class=\"code-list\"><li> <code>6 / 2</code> </li> </ul></li> <li> Exponentiation Operator: <code> ** </code> <ul class=\"code-list\"><li> <code>6 ** 2</code> , which is 6 to the power of 2, or 36.</li></ul></li></ul><p>In addition to the five basic arithmetic operators above, Python supports two other, less commonly known arithmetic operators:</p><ul><li> Floor Division Operator: <code> // </code> <ul><li> This operator returns the maximum number of times that one number, lets call it x, can be evenly divided by another number, y. When we say evenly, we mean without anything left over. </li><ul class=\"code-list\"><li><code>10 // 2</code> would return 5, as 10 can be evenly divided by 2 only 5 times: 10 = 2 x 5</li><li><code>10 // 3</code> would return 3, as 10 can be evenly divided by 3 a maximum of 3 times, and there would be a remainder of 1: 10 = (3 x 3) + 1</li><li><code>5 // 10</code> would return 0. This is a tricky one, but the reasoning is that 5 cannot be evenly divided by 10 any number of times. Another way to put is that there is no integer greater than 0 for which 10 times that integer would get you a value less than or equal to 5. So for the floor division operator, if the number to the right is greater than the number to the left, the result will always be 0.</li>\r\n</ul></ul></li> <li> Modulus Operator: <code> % </code> <ul><li> In contrast to the floor division operator, this operator returns the remainder after attempting to divide one number, x, by another number, y. Although, if x is less than y, then the result would just be x itself.</li><ul class=\"code-list\"><li><code>10 % 2</code> would return 0 since there is no remainder when dividing 10 by 2.</li><li><code>10 % 3</code> would return 1, as there is a remainder of 1 when dividing 10 by 3.</li> <li><code>5 % 10</code> would return 5 because 5 is less than 10.</li></ul></ul></li> </ul><p>The rules above for the floor division and modulus operators will always hold when <strong>both</strong> operands are positive. Things get weird when you start using negative numbers, and we highly doubt that you will ever have to use negative numbers with these two operators. <br><br> For arithmetic operations, the operands can be:</p><ul><li> Integers - whole numbers without a decimal point<ul><li>50, 2, -100, 5, 234 </li></ul></li> <li> Floating Point Numbers (aka Floats) - numbers with a decimal point<ul><li>1.452, 3.14, 0.75653, 123.7</li></ul></li></ul><p>There are also special cases where we can use arithmetic operators with non-numeric data, and you will learn about this later on in the course. Lastly, we can make use of multiple arithmetic operators on a combination of integers and floats, and in a single command:</p> <ul class=\"code-list\"><li><code>5.7 * 10 - 2.5 + 3</code></li><li><code>5 ** 2 / 5 + 40.8</code></li></ul><hr class=\"hr-challenge\"><h3 class=\"coding-challenge-heading\"> Coding Challenge </h2> <p> When writing out a single, or sequence, of Python commands (also known as <a href=\"https://techterms.com/definition/sourcecode\" target=\"_blank\">source code</a>) to be executed, we usually do so in a <a href=\"https://en.wikipedia.org/wiki/Source-code_editor\" target=\"_blank\">source code editor</a>. As you have probably already noticed, there is a source code editor on the top right hand side of the screen. This is where you will write all of your code while going through the lessons. </p><p>Right below the source code editor, there is a row of buttons that you will be using quite frequently:</p><ul><li><b>Execute Code</b> - this button will execute all of the code that you have written in the source code editor, and then display the results on the bottom right hand portion of your screen. </li> <li><b>Submit Answer</b> - this button will do the same as the Execute Code button, but will also check to see if you answered the coding challenge question(s) correctly. </li> <li><b>Restore Code</b> - this is the circular, light green button to the right of the Submit Answer button. If you click it and then click Restore Code in the pop-up box that will appear, any code that you wrote and is currently in the source code editor for the slide that you are on will be replaced with the default code for that slide. The default code for a slide is either no code at all, or preset code that we create, which you will see on the screen the first time you come to a slide. </li> </ul><p>For this coding challenge, please enter the following command in the source code editor, and then press the Submit Answer button:</p> <ul><li> <code> print(20 * 3 + 150) </code></li> </ul><p>Congratulations on writing your first line of code! </p>", "codedSlide": "T", "correctAnswer": "print(20 * 3 + 150)", "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 113, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 1, "slideNumber": 3, "lesson": "Introductory Python", "slide": "Print Expression", "defaultCode": "", "htmlBody": "<h2 class=\"slide-header\">Print Expression</h2><p>For the previous slide's coding challenge, the command that you had to execute was: <code>print(20 * 3 + 150)</code>. This command utilized Python\u2019s built-in <code>print()</code> function (more on functions in an upcoming lesson). What happened behind the scenes? </p> <ol> <li> The interpreter performed the calculations within the parenthesis <code>20 * 3 + 150</code>. The order of operations in Python is determined by <a href= \"https://www.mathsisfun.com/operation-order-pemdas.html \" target= \"_blank \">PEMDAS</a>: <ul> <li> First, 20 was multiplied by 3 to get 60. </li> <li> Then, 150 was added that product of 60 to get the final result of 210. </li> </ul> </li> <li> The <code>print()</code> function instructed the interpreter to display the result of the calculation within its parenthesis, 210, on your screen. </li> </ol> <p> If you just entered <code>20 * 3 + 150</code> into the text editor without using <code>print()</code>, the Python interpreter would still perform the computations behind the scenes, but result would <b>not</b> be displayed on the screen. That's why we use the <code>print()</code> function. <br><br> To tell Python that you want it to perform multiple, distinct commands, you must separate each command with a new line. For example, if you want to use the print function more than once in your source code: </p> <div align= \"center \"> <img src= \"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/3+-+Print+Expression/print_1.png \" style= \"width:201px; height:181px; \"> </div> <br> <p> As you can see above: </p> <ul> <li> Each distinct computation is in its own <code>print()</code> function. </li> <li> No two <code>print()</code> functions are on the same line - each one is on a new line in the text editor. Please note that it does not matter if the next <code>print()</code> function is on the next line or five lines below the previous one, as long as it's on a new line. </li> <li> The output of the source code displays the resulting value of each computation in the same order as the source code. The interpreter executes your source code line by line, starting from the top. </li> </ul> <p> If there are multiple <code>print()</code> functions on the same line, the interpreter would display the following when you try executing the code: </p> <div align= \"center \"> <img src= \"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/3+-+Print+Expression/print_2.png \" style= \"width:420px; height:142px; \"> </div> <br> <p> The interpreter always tries to give us enough information to be able to dissect the issue(s) in our code. Here it's telling us: </p> <ul> <li> Which line in the source code is causing the error - <code>line 1</code>. </li> <li> The type of error - <code>SyntaxError:</code>. </li> <li> A brief description of the error - <code>invalid syntax</code>. </li> </ul> <p> We will explain what syntax is on the next slide! </p> <hr class=\"hr-challenge\"><h3 class=\"coding-challenge-heading\"> Coding Challenge </h2> <p> For this challenge, your task is to create source code that will display the results of the following <b>distinct</b> calculations on the screen: </p> <ul> <li> <code>(5 * 4.5) + 15</code> </li> <li> <code>10 / 3</code> </li> <li> <code>3 - 274.7 + 54</code> </li> </ul>", "codedSlide": "T", "correctAnswer": "print((5 * 4.5) + 15)\nprint(10 / 3)\nprint(3 - 274.7 + 54)", "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 114, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 1, "slideNumber": 4, "lesson": "Introductory Python", "slide": "Python Syntax", "defaultCode": "", "htmlBody": "<p>\n            Any natural language, such as English, has certain <a href=\"https://grammar.yourdictionary.com/grammar-rules-and-tips/11-rules-of-grammar.html\" target=\"_blank\"> grammar rules</a> that you must follow in order to construct valid sentences.  This is also the case for all programming languages.  Each unique programming language is analogous to a human language, and requires strict adherence to specific grammar, also known as syntax, rules.  These syntax rules define whether or not your code is properly written.  Some of the Python syntax rules that you have already come across are:\n            </p>\n            <ul>\n                <li>\n                    Every distinct command must be separated by a new line in your source code.  \n                    <ul>\n                        <li>\n                            In the previous slide, we showed you the output (a <code>SyntaxError</code>) of trying to execute code that had two consecutive <code>print()</code> statements on the same line, separated by a space.   \n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    If there's a function in your source code that you want the interpreter to execute, it must be written as follows: <code>name_of_function(function arguments)</code>.  \n                    <ul>\n                        <li>\n                            For example, <code>print(5+ 5)</code>.  The function's name is <code>print</code>, followed by an opening parenthesis <code>(</code>, the arguments of the function (which we explain in a later lesson) <code>5 + 5</code>, and finally a closing parenthesis <code>)</code>. What would happen if we used a closing bracket instead of parenthesis?\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/4+-+Syntax/syntax_1.png\" style=\"width:421px; height:148px;\">\n            </div>\n            <br>\n            <p>\n                As you can see, the interpreter throws a <code>SyntaxError</code> when we use a bracket instead of parenthesis with the <code>print()</code> function.  Now, what if we accidentally entered a symbol that's not a valid arithmetic operator in between the two operands? \n            </p>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/4+-+Syntax/syntax_2.png\" style=\"width:421px; height:139px;\">\n            </div>\n            <br>\n            <p>\n                Another <code>SyntaxError</code>, as you might have expected.  In both of the examples above the interpreter pointed to the exact location of the syntax error in the source code.    \n            <br><br>\n                To avoid syntax errors, we must be diligent in writing our code.  We have just covered a few of Python's many syntax rules.  Although, similar to natural languages, as you become a more experienced coder in a specific programming language, writing syntactically accurate code will become effortless.  For the times that you do have syntax errors in your Python code, the interpreter will always be there to remind and show us where those errors are.\n            </p> ", "codedSlide": "F", "correctAnswer": "test", "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 115, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 1, "slideNumber": 5, "lesson": "Introductory Python", "slide": "Comments", "defaultCode": "", "htmlBody": "        <p>\n        As you gain more experience writing code, the length and/or complexity of your code will increase.  In addition, code you write will potentially be looked at, used, or edited by either you or someone else.  This is where comments come in handy, as they allow you to explain what a certain portion of code is doing.\n        <br><br>\n        We make use of comments in Python with the hashtag symbol <code>#</code>.  As you already know, the interpreter executes your code line by line.  During execution, it ignores any text that comes after a hashtag, which tells it \"I am a comment, ignore me!\" \n        <br><br>\n        Comments can be placed:\n        <ul>\n            <li> on their own line within the text editor </li>\n            <li> after a legit command </li> \n        </ul>\n        <div align=\"center\">\n            <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Introductory+Python/5+-+Comments/comment_1.png\" style=\"width:311px; height:133px;\">\n        </div>\n        <br>\n        <p>\n            Some things to note about using comments in your code:\n        </p>\n        <ul>\n            <li>\n                If you start a new line with a comment and then on that same line continue writing legitimate Python code, the interpreter will not execute the code.  It will consider it as being part of that comment.  For example, the interpreter will interpret the following line as a comment:\n                <ul>\n                    <li>\n                        <code># this is a comment print(5 / 5)</code>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                When placing a comment after a command on the same line, it's best practice to add a space or two in between the end of the command and the start of the comment:  \n                <ul>\n                    <li>\n                        <code>print(5 / 5)  # this is a comment</code>\n                    </li>\n                </ul> \n            </li>\n        </ul>\n        <p>  \n            How often should you include comments in your code?  There is no set amount, but our suggestion would be to include them only when you deem necessary.  Although, there is such a thing as too many comments.  You don't want to include them for code that can be easily understood by a competent programmer. \n        <br><br>    \n            We'll occasionally make use of comments in the default code for certain slides, and our guided projects solution code.  If you'd like, you can use these as a guide for including comments in your own code.  \n        <br><br>\n            Feel free to experiment with the <code>print()</code> function and Python comments in the text editor.  There is no coding challenge for this slide. \n        </p> ", "codedSlide": "T", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 116, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 1, "slideNumber": 6, "lesson": "Introductory Python", "slide": "Summary", "defaultCode": "", "htmlBody": "<p>\n            Congratulations on completing your first DataExpert lesson!  \n        <br><br> \n            Every lesson concludes with a summary slide that:\n            <ul>\n                <li>\n                    Highlights and briefly summarizes key concepts from the lesson.\n                </li>\n                <li>\n                    Has links to articles and/or documentation for new terms introduced throughout the lesson that we believe would be worthwhile for you to look into. \n                </li> \n            </ul>\n        </p>\n        <h3> Key Concepts </h3> \n        <ul>\n            <li>\n                Python is one of the most, if not the most, widely used programming languages in the data science world.  This is due to its versatility, ease of use, and continued support for data science use cases (we will go into more detail on the last reason later on).    \n            </li>\n            <li>\n                Humans utilize programming languages to instruct the computer to perform specific commands, the most basic being arithmetic calculations.\n                <ul>\n                    <li>\n                        To perform arithmetic calculations in Python, you need to use its arithmetic operators: <code>+ - * / **</code>.\n                    </li>\n                </ul> \n            </li> \n            <li>\n                The <code>print()</code> function can be used to display numbers (integers, floats), or the result of arithmetic computations on your screen.  It can also be utilized do display other Python data types. \n            </li> \n            <li>\n                Just like natural, human languages have grammar rules that define the structure of the language, programming languages have syntax rules.  If you have incorrect syntax in your Python source code, the interpreter will halt execution at the source of the error and raise a <code>SyntaxError</code>.\n            </li>\n            <li>\n                We can make use of comments in our code to document the purpose of certain portions of the code. \n            </li>\n        </ul>", "codedSlide": "F", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 121, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 2, "slideNumber": 1, "lesson": "Primitive Data Types", "slide": "Introduction to Strings", "defaultCode": "", "htmlBody": "<p>      \n                We previously learned how to use Python as a calculator to perform operations on the integer and float numeric <i>data types</i>.  One data type differs from another in its features and/or the operations that can be performed on data of that data type.  For example, integers are whole numbers that you can perform arithmetical computations on.  You can also perform arithmetical computations on floats, but they are numbers that contain a decimal point.  \n            <br><br>\n                <i>Strings</i> are another one of Python's basic data types. A string is comprised of zero or more characters enclosed (delimited) in single <code>''</code> or double <code>\"\"</code> quotation marks.  There is no restriction on which characters, or the combination of characters that can be used to form a string. \n            <br><br> \n                Some examples of strings are:\n            </p>\n            <ul> \n                <li>\n                    <code>\"A\"</code> \n                </li>\n                <li>\n                    <code>'Hello world'</code> \n                </li>\n                <li>\n                    <code>\"12345\"</code> \n                </li>\n                <li>\n                    <code>'The company's profits increased by $45,000.'</code> \n                </li>\n                <li>\n                    <code>\"!@#$%^&*()%\"</code> \n                </li>\n                <li>\n                    <code>''</code> \n                </li> \n            </ul>\n            <p>\n                Sometimes you'll want to include single and/or double quotes within a string.  Remember that the Python interpreter determines if data is a string by looking for enclosing single or double quotes.  Therefore, including single (double) quote(s) in a string that is delimited by single (double) quotes will result in a <code>SyntaxError</code>:\n            </p> \n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_1.png\" style=\"width:489px; height:132px;\">\n            </div>\n            <br> \n            <p>\n                This is because the interpreter considers anything in between two quotation marks as a string, so it throws an error when you try including single quotes within a string that is delimited by single quotes.  In the image above, you can see that <code>'This is a string containing '</code> is a light green color, indicating that it is a string.  The interpreter mistakenly interpreted this smaller portion of the whole string we intended to create as the full string.  The same thing would happen if we tried including double quotes within a string delimited by double quotes.  So how can we get around this?  There are a few options.\n            </p> \n            <ul>\n                <li>\n                    For a string that will only contain single or double quotes, just enclose the string in the other type of quotation marks.  For example, \n                    <ul>\n                        <li>\n                            If you want a string to only include single quotes, enclose the string in double quotes:\n                            <ul>\n                                <li>\n                                    <code>\n                                        \"This is a string that contains 'single quotes' and is enclosed in double quotes.\"\n                                    </code>\n                                </li>\n                            </ul> \n                        </li>\n                        <li>\n                            If you want a string to only include double quotes, enclose the string in single quotes: \n                            <ul>\n                                <li>\n                                    <code>\n                                        'This is a string that contains \"double quotes\" and is enclosed in single quotes.'\n                                    </code>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    You can <i>escape</i> quotes within a string by using the backslash <code>\\</code> character.  The backslash character can be used with certain characters to inform the interpreter to ignore, or escape, the usual interpretation of that character.    \n                    <ul>\n                        <li>\n                            If you want to include single (double) quotes in a string delimited by single (double) quotes, insert a backslash character right before the single (double) quote(s) that are within that string:\n                        </li>\n                    </ul>\n                </li> \n            </ul>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_2.png\" style=\"width:377px; height:114px;\">\n            </div>\n            <br>\n            <p>\n                In addition, the backslash can be used on its own, or with other characters within a string for various purposes:\n            </p>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_3.png\" style=\"width:451px; height:388px;\">\n            </div>\n            <br>\n            <p>\n            Finally, if you want to create a multiline string without having to use the <code>\n</code> escape sequence, you can enclose a string in triple single or double quotes.  The benefit of using triple quotes is that you can include both single and double quotes within the string without having to escape them.\n            </p>\n            <div align=\"center\">\n                <img src=\"https://s3.amazonaws.com/dataexpert.images/Introduction+to+Python+Programming+for+Data+Science/Basic+Data+Types/Intro+to+Strings/strings_4.png\" style=\"width:325px; height:186px;\">\n            </div>\n\n            <hr id=\"hrChallenge\">  \n            <h3 class=\"codingChallenge\"> Coding Challenge </h2>\n            <p>\n                In a previous lesson, we utilized Python's built-in <code>print()</code> function to display the output of various math computations.\n                <br><br>\n                We can also use this function to print strings - just put the string (with quotes) within the parentheses of the <code>print()</code> function.\n                <br><br>\n                For this challenge, print the following strings on the screen, in the order presented below:\n            </p> \n            <ul>\n                <li>Hello and welcome to data expert!</li>\n                <li>The correct \"term\" is data expert</li>\n                <li>If you're going to give it a try, give it your all</li>\n            </ul>", "codedSlide": "T", "correctAnswer": "print('Hello and welcome to data expert!')\r\nprint('The correct \"term\" is data expert')\r\nprint('If you\\'re going to give it a try, give it your all')", "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 122, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 2, "slideNumber": 2, "lesson": "Primitive Data Types", "slide": "String Indexing", "defaultCode": "", "htmlBody": "", "codedSlide": "T", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 123, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 2, "slideNumber": 3, "lesson": "Primitive Data Types", "slide": "String Slicing", "defaultCode": "", "htmlBody": "", "codedSlide": "T", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 124, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 2, "slideNumber": 4, "lesson": "Primitive Data Types", "slide": "Variables", "defaultCode": "", "htmlBody": "", "codedSlide": "T", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 125, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 2, "slideNumber": 5, "lesson": "Primitive Data Types", "slide": "Boolean", "defaultCode": "x = 30\ny = 20\nnyc = 'New York City is known as the \"Big Apple\"'\nfl = 'Florida is known as the \"Sunshine State\"'", "htmlBody": "                <p>Data science is the most interesting and intellectually stimulating profession - <code>True</code> </p> \n                <p>There is no better place to learn data science than Data Expert - <code>True</code> </p>\n                <p> Data analyst is a good job - <code>False</code>, it is the <b>best</b> job. </p>\n                <p>The answers to the questions above, <code>True</code> or <code>False</code>, are known in computer programming as the <b>boolean</b> data types. Booleans can only be one of two values, <code>True</code> or <code>False</code>, and when using them in Python, you must always <b>capitalize</b> the first letter (T and F). </p>\n                <p>You will be working with booleans quite often, so it is in your best interest to familiarize yourself with how they work.  Booleans are most commonly used in Python to compare two or more values, and we can do this by utilizing Python's <b>comparison operators</b>: </p>\n            <div class=\"lessonTable\">\n                <table align=\"center\">\n                    <tr>\n                        <th id=\"tableHeader\">Operator</th>\n                        <th id=\"tableHeader\">Meaning</th>\n                    </tr>\n                    <tr> \n                        <th><code><</code></th>\n                        <th>strictly less than</th>\n                    </tr>\n                    <tr>\n                        <th><code><=</code></th>\n                        <th>less than or equal to</th>\n                    </tr>\n                    <tr>\n                        <th><code>></code></th>\n                        <th>strictly greater than</th>\n                    </tr>\n                    <tr>\n                        <th><code>>=</code></th>\n                        <th>greater than or equal to</th>\n                    </tr>\n                    <tr>\n                        <th><code>==</code></th>\n                        <th>equal</th>\n                    </tr>\n                    <tr>\n                        <th><code>!=</code></th>\n                        <th>not equal</th>\n                    </tr>\n                    <tr>\n                        <th><code>is</code></th>\n                        <th>object identity</th>\n                    </tr>\n                    <tr>\n                        <th><code>is not</code></th>\n                        <th>negated object identity</th>\n                    </tr>\n            </table>\n            </div>\n            <p>The comparison operators can be used to compare any type of data - integers, floats, strings, and even booleans themselves.</p>\n            <div align=\"center\">\n                <img src=\"https://dataexpertimages.s3.amazonaws.com/Introduction+to+Python+Programming+for+Data+Science/2+-+Strings%2C+Boolean+%26+Variables/5+-+Boolean/boolean_1.png\" style=\"width:45%; height:45%;\">\n            </div> \n            <div align=\"center\"> \n                    <img src=\"https://dataexpertimages.s3.amazonaws.com/Introduction+to+Python+Programming+for+Data+Science/2+-+Strings%2C+Boolean+%26+Variables/5+-+Boolean/boolean_2.png\" style=\"width:40%; height:50%;\">\n            </div>\n            <div align=\"center\">\n                    <img src=\"https://dataexpertimages.s3.amazonaws.com/Introduction+to+Python+Programming+for+Data+Science/2+-+Strings%2C+Boolean+%26+Variables/5+-+Boolean/boolean_3.png\" style=\"width:40%; height:50%;\">\n            </div>\n\n            <p>Some things to note about comparing two or more strings:</p>\n            <ul>\n                <li> If the strings are exactly the same, which includes capitalization, then Python will return <code>True</code> when you check for their equality. </li>\n                <li> Although you probably will not be comparing strings in this way often, when using the greater than or less than comparison operators with strings:\n                    <ul>\n                        <li> all lower case letters are considered \"less than\" uppercase ones </li>\n                        <li>when comparing two letters of the same case, the one that comes first in the alphabet is \"less than\" any letters that come after it</li>\n                    </ul>\n                </li>\n            </ul>\n            <p>We can also use the <code>in</code> keyword to check whether a certain string is contained in another string.  Please note that capitalization <b>matters</b>.</p>\n            <div align=\"center\">\n                <pre>\n                 <code class=\"python codeBlock\">x = 5\nprint('llo' in 'hello world')\nprint('expert' in 'DataExpert')\nprint('Expert' in 'DataExpert')\n# Output \n# True\n# False \n# True \n                    </code>\n                </pre>\n            </div> \n            <p>For all of the comparisons above, we could have assigned the comparison expression to a variable. The value of that variable would be the boolean result of the expression, and therefore its data type would be boolean:</p>\n            <div align=\"center\">\n                <pre>\n                    <code class=\"python codeBlock\">greater_than = 5 > 6 # The value of this variable becomes True \nstudy = 'in' in 'studying' # The value of this variable becomes False \nprint(greater_than)\nprint(study)\n# Output\n# False\n# True \n                    </code>\n                </pre>\n            </div>\n            <p>We also frequently use booleans to filter data sets based on certain criteria.  We will learn more about this use case later on.</p>\n\n            <hr id=\"hrChallenge\">  \n\n            <h3 class=\"codingChallenge\"> Coding Challenge </h2>\n            <p>We have created a few variables for you in the text editor to the right. Compare these variables as follows:</p>\n                <ul> \n                    <li> assign the comparison <code>x</code> not equal to <code>y</code> to the variable <code>equal</code> </li>\n                    <li> assign the comparison <code>x * y</code> greater than <code>200</code> to the variable <code>product</code> </li>\n                    <li>  assign the comparison <code>nyc</code> equal to <code>fl</code> to the variable <code>state</code> </li>\n                    <li> check whether the last element of  <code>nyc</code> is equal to the last element of <code>fl</code> and assign it to the variable <code>last</code> (Hint: String Indexing & Slicing) </li>\n                    <li> check whether the 13<sup>th</sup> - 31<sup>st</sup> (inclusive) elements of <code>nyc</code> are in <code>fl</code> and assign that to the variable <code>isin</code> </li>\n                </ul>", "codedSlide": "T", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 126, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 2, "slideNumber": 6, "lesson": "Primitive Data Types", "slide": "Summary", "defaultCode": "", "htmlBody": "", "codedSlide": "F", "correctAnswer": null, "hint": null}}, {"model": "courses.courselessonslidemaster", "pk": 131, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 3, "slideNumber": 1, "lesson": "Control Flow", "slide": "Introduction to Control Flow", "defaultCode": "print('hello')\r\nx = 35", "htmlBody": "<p>Hello world, new testing</p>", "codedSlide": "T", "correctAnswer": "print('Testing')", "hint": "None"}}, {"model": "courses.courselessonslidemaster", "pk": 132, "fields": {"course": "Introduction to Python Programming", "courseNumber": 1, "lessonNumber": 3, "slideNumber": 2, "lesson": "Control Flow", "slide": "For Loops", "defaultCode": "print('test')", "htmlBody": "<p>Test</p>", "codedSlide": "T", "correctAnswer": "print('test')", "hint": "none"}}, {"model": "courses.courselessonslidemaster", "pk": 211, "fields": {"course": "Intermediate Python", "courseNumber": 2, "lessonNumber": 1, "slideNumber": 1, "lesson": "Files & The CSV Module", "slide": "Introduction to Files", "defaultCode": "with open('test.csv') as f:\r\n    f.readlines()", "htmlBody": "<p>testing</p>", "codedSlide": "T", "correctAnswer": "<p>TEST</p>", "hint": "NONE"}}, {"model": "courses.courselessonslidemaster", "pk": 212, "fields": {"course": "Intermediate Python", "courseNumber": 2, "lessonNumber": 1, "slideNumber": 2, "lesson": "Files & The CSV Module", "slide": "The Open Function", "defaultCode": "print('test')", "htmlBody": "<p>TEST</p>", "codedSlide": "T", "correctAnswer": "", "hint": ""}}, {"model": "sessions.session", "pk": "0dmln3atscd8mhjcydrnkq5nvd30o93k", "fields": {"session_data": "Mjg2ZDNlMmUyZTIwZDU1YTIxOTYxNjMwM2Q2OWVkNjIyYjFmZGYzZDp7Il9hdXRoX3VzZXJfaWQiOiIzIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJhY2I2MjQ1YjI0N2Q5OTMwNzk3YThkZmUwYThkZjA0MzJhOGZjYzU5In0=", "expire_date": "2020-01-14T00:21:05.111Z"}}, {"model": "sessions.session", "pk": "0va75tdinmzuepl6wez5h14umn4rps10", "fields": {"session_data": "YWExNmEzMTM5N2M4MTg1YTkxYmRkZjdhNzZiNjI2MWVhMzgwOTM5NTp7fQ==", "expire_date": "2020-01-22T21:44:42.798Z"}}, {"model": "sessions.session", "pk": "2jgip9gvomz7jx21xcw35gqju1e69rot", "fields": {"session_data": "M2NiM2QzNTQwYmQ5NTVlMzA2NzUyZDc3MWIzMTY5MmU1OWVlOGY1NTp7Il9hdXRoX3VzZXJfaWQiOiIxMiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMDg5ZDI5YTkwMjBiZDhhMTIyYTUwYjMzY2U0OTgzMDViYWE1Y2IwMyJ9", "expire_date": "2020-01-19T16:12:01.013Z"}}, {"model": "sessions.session", "pk": "358jruysr7nnxkd4dbcug2cn4fj6ixin", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-20T23:37:26.750Z"}}, {"model": "sessions.session", "pk": "571p2qf760r1stb561jtyxgutwmi7hxp", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-20T23:49:20.873Z"}}, {"model": "sessions.session", "pk": "5pt556nwld9ukxknx3htapgn9wvomj2o", "fields": {"session_data": "MTA2NWMwZDk5NzBhMjdhMjk5YzdmYzY3NGVlMzBkN2Q1MTNhYTNlNDp7Il9hdXRoX3VzZXJfaWQiOiIxNCIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjUyNmZmMWNkYzAzOWM3NmQ5N2FjYTk3ZDZlNTNjNGFmNTI3YjFmYyJ9", "expire_date": "2020-01-21T01:40:20.382Z"}}, {"model": "sessions.session", "pk": "6b3i91tyvvzahls8cyvsrrqxy5x4rwe3", "fields": {"session_data": "ZmViM2UyNDZkNTc2MzM1NmE4OWUwYTYzZmExMDQzYTFlOTJmYTBjNTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4MTU1MjU5MDA5MmJlZjNlZDRhMDYyMGJhODJkZmE1MWJlZWFkYjdjIn0=", "expire_date": "2020-01-14T16:23:04.613Z"}}, {"model": "sessions.session", "pk": "6t6azgu85zu5seyd96o97qocps8xm3p7", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-19T21:02:39.883Z"}}, {"model": "sessions.session", "pk": "7wv37qispk6xdw6vrpqa0l9w1ew5v5qs", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-20T23:39:57.696Z"}}, {"model": "sessions.session", "pk": "8485p15oe4uymx920fwbgex1admbdkm4", "fields": {"session_data": "M2U2M2FjYzY0MThjYjY1ODE3ZmIwMmEwNGVlNmJhYmIyM2EwMTliYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwODlkMjlhOTAyMGJkOGExMjJhNTBiMzNjZTQ5ODMwNWJhYTVjYjAzIn0=", "expire_date": "2020-01-22T21:49:57.490Z"}}, {"model": "sessions.session", "pk": "8j1t6lflkib8idlmy4lfcslr822pmupt", "fields": {"session_data": "M2U2M2FjYzY0MThjYjY1ODE3ZmIwMmEwNGVlNmJhYmIyM2EwMTliYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwODlkMjlhOTAyMGJkOGExMjJhNTBiMzNjZTQ5ODMwNWJhYTVjYjAzIn0=", "expire_date": "2020-01-23T17:51:58.542Z"}}, {"model": "sessions.session", "pk": "bkn0ewiql4mpht961f9thdt5v0whf76g", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-19T20:55:58.947Z"}}, {"model": "sessions.session", "pk": "c07w8m2ehwsmx8xbi6jkyiw4j8f7tq38", "fields": {"session_data": "NDI3MjNmM2RjNDkxYzZlOGE2OWI3M2YxMWVjYWUyODM5MzE3ODYyZDp7Il9hdXRoX3VzZXJfaWQiOiIxMCIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjdmN2I3ZWUzODU5NjE2YmJmZjExMGVkY2JlY2MzOWIwNDIwYTIzMCJ9", "expire_date": "2020-01-19T15:57:18.012Z"}}, {"model": "sessions.session", "pk": "c4vyjrifenoxrqo4cxq7wxas4zrtpknu", "fields": {"session_data": "M2U2M2FjYzY0MThjYjY1ODE3ZmIwMmEwNGVlNmJhYmIyM2EwMTliYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwODlkMjlhOTAyMGJkOGExMjJhNTBiMzNjZTQ5ODMwNWJhYTVjYjAzIn0=", "expire_date": "2020-01-23T16:00:34.931Z"}}, {"model": "sessions.session", "pk": "dd824ec4ig7bvyv62jk477uydljgzqf6", "fields": {"session_data": "OTNhNzEwZjk5MmNlNmM0MjlmM2U5MjRlOWFhMWI5N2ZjYTliNTFhNDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI2NzUxMDE3NTdmYjhhNjU0ZTNhN2U1ODU5MzNhYzU3OGE1MDAyZmNlIn0=", "expire_date": "2020-01-08T20:28:34.236Z"}}, {"model": "sessions.session", "pk": "dh1oedu30w3sdflrm0ce0583xebi1362", "fields": {"session_data": "ZmViM2UyNDZkNTc2MzM1NmE4OWUwYTYzZmExMDQzYTFlOTJmYTBjNTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4MTU1MjU5MDA5MmJlZjNlZDRhMDYyMGJhODJkZmE1MWJlZWFkYjdjIn0=", "expire_date": "2020-01-13T15:38:24.744Z"}}, {"model": "sessions.session", "pk": "dyl2hb3l4heeahoktzhud4a0gqfn4i1z", "fields": {"session_data": "YWExNmEzMTM5N2M4MTg1YTkxYmRkZjdhNzZiNjI2MWVhMzgwOTM5NTp7fQ==", "expire_date": "2020-01-18T15:16:46.896Z"}}, {"model": "sessions.session", "pk": "f5t3shad2taom6bc5dzh80bpvwak6rxi", "fields": {"session_data": "ZmViM2UyNDZkNTc2MzM1NmE4OWUwYTYzZmExMDQzYTFlOTJmYTBjNTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4MTU1MjU5MDA5MmJlZjNlZDRhMDYyMGJhODJkZmE1MWJlZWFkYjdjIn0=", "expire_date": "2020-01-14T15:54:59.185Z"}}, {"model": "sessions.session", "pk": "gl912hacoqsq5kweak691s2fenu08isg", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-19T21:00:54.407Z"}}, {"model": "sessions.session", "pk": "hlzifwelir0jv22baf283f21limv8vfv", "fields": {"session_data": "YWExNmEzMTM5N2M4MTg1YTkxYmRkZjdhNzZiNjI2MWVhMzgwOTM5NTp7fQ==", "expire_date": "2020-01-21T01:36:36.475Z"}}, {"model": "sessions.session", "pk": "k4zha4c1bv6xezg4x6pl1mx8aisk7d2l", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-20T23:35:45.011Z"}}, {"model": "sessions.session", "pk": "q1cc3h2av3l6judmm4o3j5ydp6fu5f94", "fields": {"session_data": "YWExNmEzMTM5N2M4MTg1YTkxYmRkZjdhNzZiNjI2MWVhMzgwOTM5NTp7fQ==", "expire_date": "2020-01-18T15:17:41.903Z"}}, {"model": "sessions.session", "pk": "qgjrvmsikm1tgop2ueesn9z4b5hjybcz", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-20T23:35:10.142Z"}}, {"model": "sessions.session", "pk": "teznsg8k9imq9wfx1pwz9dmgtaozuo9x", "fields": {"session_data": "OTRhMjE2MTQ5MGFmMGI5MzhjMTBlZjljMzM2N2EzODJlMDcwMDgxMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI1MmQ3OTgxMjZmNGZlNDc0OGEyZTFjYTIzOTc2NTBkODczOWZmMzg2In0=", "expire_date": "2020-04-26T19:38:54.265Z"}}, {"model": "sessions.session", "pk": "xn8gsnp4gt6inylo5mvk5392fs25taei", "fields": {"session_data": "YWExNmEzMTM5N2M4MTg1YTkxYmRkZjdhNzZiNjI2MWVhMzgwOTM5NTp7fQ==", "expire_date": "2020-01-21T01:35:05.423Z"}}, {"model": "sessions.session", "pk": "yue3lv4z5emzo4olx13vzqbblsmswgpm", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-05-23T17:22:17.719Z"}}, {"model": "sessions.session", "pk": "zv4o49ttpvrqibp79p2cg58d9gb2cj7n", "fields": {"session_data": "ZjRkZTRmYzMxNGYxODllOWIzNjQwNGFjODVkNDY2OWIyYzk1OTA4Yjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxODI5MWNhZTZmZjBjNzFhNTIyZGM2MWFhYjY0NjI3YTUwOWJjZTgxIn0=", "expire_date": "2020-06-02T01:00:19.266Z"}}, {"model": "authentication.customuser", "pk": 1, "fields": {"password": "pbkdf2_sha256$180000$4qha68SNfrbv$RsXATvY7OSm0Q5s9Zuc/+qAC1vNQ9HwBWD1rAcwuXrk=", "last_login": "2020-05-19T01:00:19.259Z", "is_superuser": true, "first_name": "Daniel", "last_name": "Irmihaev", "is_staff": true, "is_active": true, "date_joined": "2020-04-12T19:19:06Z", "email": "dataexpertnyc@gmail.com", "name": "DataExpert", "location": "", "groups": [], "user_permissions": []}}, {"model": "authentication.customuser", "pk": 25, "fields": {"password": "pbkdf2_sha256$180000$ViqDjV0thNdi$7hmVLkKzpOc0qbn4rUVnVQpoMrr2FxbhNRId+zW6fJU=", "last_login": null, "is_superuser": false, "first_name": "", "last_name": "", "is_staff": false, "is_active": true, "date_joined": "2020-05-02T16:32:47.540Z", "email": "dirmihaev@gmail.com", "name": "Daniel Irmihaev", "location": null, "groups": [], "user_permissions": []}}, {"model": "authentication.customuser", "pk": 26, "fields": {"password": "pbkdf2_sha256$180000$suQVqOhc7Asj$i1E2u8YHQGATEVfT96gMbehmPNuTkKO07mJxyX4qZ8w=", "last_login": null, "is_superuser": false, "first_name": "", "last_name": "", "is_staff": false, "is_active": true, "date_joined": "2020-05-04T23:09:32.447Z", "email": "test@gmail.com", "name": "Danny", "location": null, "groups": [], "user_permissions": []}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2020-04-12T19:39:29.358Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "None's Profile", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"First name\", \"Last name\"]}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2020-04-12T19:39:52.550Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "DataExpert's Profile", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Name\"]}}]"}}, {"model": "courses.slides", "pk": 1, "fields": {"user": 25, "cls": 111, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 1, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 2, "fields": {"user": 25, "cls": 112, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 2, "code": "print('50')", "completed": "F"}}, {"model": "courses.slides", "pk": 3, "fields": {"user": 25, "cls": 113, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 3, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 4, "fields": {"user": 25, "cls": 114, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 4, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 5, "fields": {"user": 25, "cls": 115, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 5, "code": "\n", "completed": "F"}}, {"model": "courses.slides", "pk": 6, "fields": {"user": 25, "cls": 116, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 6, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 7, "fields": {"user": 25, "cls": 121, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 1, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 8, "fields": {"user": 25, "cls": 122, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 2, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 9, "fields": {"user": 25, "cls": 123, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 3, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 10, "fields": {"user": 25, "cls": 124, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 4, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 11, "fields": {"user": 25, "cls": 125, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 5, "code": "x = 30\ny = 20\nnyc = 'New York City is known as the \"Big Apple\"'\nfl = 'Florida is known as the \"Sunshine State\"'", "completed": "F"}}, {"model": "courses.slides", "pk": 12, "fields": {"user": 25, "cls": 126, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 6, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 13, "fields": {"user": 1, "cls": 111, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 1, "code": "", "completed": "T"}}, {"model": "courses.slides", "pk": 14, "fields": {"user": 1, "cls": 112, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 2, "code": "print(20 * 3 + 150)", "completed": "F"}}, {"model": "courses.slides", "pk": 15, "fields": {"user": 1, "cls": 113, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 3, "code": "for i in range(100):\n    print(i)", "completed": "F"}}, {"model": "courses.slides", "pk": 16, "fields": {"user": 1, "cls": 114, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 4, "code": "", "completed": "T"}}, {"model": "courses.slides", "pk": 17, "fields": {"user": 1, "cls": 115, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 5, "code": "print('test')", "completed": "T"}}, {"model": "courses.slides", "pk": 18, "fields": {"user": 1, "cls": 116, "courseNumber": 1, "lessonNumber": 1, "slideNumber": 6, "code": "", "completed": "T"}}, {"model": "courses.slides", "pk": 19, "fields": {"user": 1, "cls": 121, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 1, "code": "print('Hello and welcome to data expert!')\nprint('The correct \"term\" is data expert')\nprint('If you\\'re going to give it a try, give it your all')", "completed": "F"}}, {"model": "courses.slides", "pk": 20, "fields": {"user": 1, "cls": 122, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 2, "code": "", "completed": "T"}}, {"model": "courses.slides", "pk": 21, "fields": {"user": 1, "cls": 123, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 3, "code": "", "completed": "T"}}, {"model": "courses.slides", "pk": 22, "fields": {"user": 1, "cls": 124, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 4, "code": "", "completed": "T"}}, {"model": "courses.slides", "pk": 23, "fields": {"user": 1, "cls": 125, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 5, "code": "x = 30\ny = 20\nnyc = 'New York City is known as the \"Big Apple\"'\nfl = 'Florida is known as the \"Sunshine State\"'", "completed": "F"}}, {"model": "courses.slides", "pk": 24, "fields": {"user": 1, "cls": 126, "courseNumber": 1, "lessonNumber": 2, "slideNumber": 6, "code": "", "completed": "F"}}, {"model": "courses.slides", "pk": 25, "fields": {"user": 1, "cls": 131, "courseNumber": 1, "lessonNumber": 3, "slideNumber": 1, "code": "print('hello')\r\nx = 35", "completed": "F"}}, {"model": "courses.slides", "pk": 26, "fields": {"user": 1, "cls": 132, "courseNumber": 1, "lessonNumber": 3, "slideNumber": 2, "code": "print('test')", "completed": "F"}}, {"model": "courses.slides", "pk": 27, "fields": {"user": 1, "cls": 211, "courseNumber": 2, "lessonNumber": 1, "slideNumber": 1, "code": "with open('/tmp/test.csv') as f:\r\n    f.readlines()", "completed": "F"}}, {"model": "courses.slides", "pk": 28, "fields": {"user": 1, "cls": 212, "courseNumber": 2, "lessonNumber": 1, "slideNumber": 2, "code": "print('test')", "completed": "F"}}]